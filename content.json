{"meta":{"title":"ShonnZong的博客","subtitle":null,"description":null,"author":"ShonnZong","url":"https://www.yszldf.cn"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-06-14T07:41:19.377Z","updated":"2019-06-14T07:41:19.377Z","comments":false,"path":"404/index.html","permalink":"https://www.yszldf.cn/404/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-06-14T07:41:19.434Z","updated":"2019-06-14T07:41:19.434Z","comments":false,"path":"about/index.html","permalink":"https://www.yszldf.cn/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-06-14T07:41:19.579Z","updated":"2019-06-14T07:41:19.579Z","comments":false,"path":"books/index.html","permalink":"https://www.yszldf.cn/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-06-14T07:41:19.639Z","updated":"2019-06-14T07:41:19.639Z","comments":false,"path":"categories/index.html","permalink":"https://www.yszldf.cn/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-06-14T07:41:19.779Z","updated":"2019-06-14T07:41:19.779Z","comments":true,"path":"links/index.html","permalink":"https://www.yszldf.cn/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-06-14T07:41:19.838Z","updated":"2019-06-14T07:41:19.838Z","comments":false,"path":"repository/index.html","permalink":"https://www.yszldf.cn/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-06-14T07:41:20.006Z","updated":"2019-06-14T07:41:20.006Z","comments":false,"path":"tags/index.html","permalink":"https://www.yszldf.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ThinkPHP5常用命令","slug":"ThinkPHP5常用命令","date":"2019-07-20T09:57:14.000Z","updated":"2019-07-20T10:03:34.321Z","comments":true,"path":"2019/07/20/ThinkPHP5常用命令/","link":"","permalink":"https://www.yszldf.cn/2019/07/20/ThinkPHP5常用命令/","excerpt":"","text":"模块自动生成指令：1234567默认会读取应用目录application下面的build.php作为自动 生成的定义文件，如果你的定义文件位置不同，则需要使用 --config 参数指定如下： php think build (--config build.php) 快速生成类库文件:12345678910111) 快速生成控制器类 执行下面的指令可以生成 index模块的 Blog控制器类库文件 php think make:controller index/Blog 2) 快速生成模型类 执行下面的指令可以生成 index 模块的 Blog 模型类库文件 php think make:model index/Blog 快速生成类库映射文件:12345可以使用下面的指令生成类库映射文件，提高系统自动加载的性能。 php think optimize:autoload 指令执行成功后，会在rumtime目录下面生成classmap.php文件，生成的类库映射文件会扫描系统目录和 应用目录的类库 生成路由缓存:1234567optimize:route如果你的应用定义了比较多的路由规则，可以使用下面的指令生成路由缓存文件，提高系统的路由检测的性 能。 php think optimize:route 指令执行成功后，会在rumtime目录下面生成route.php 文件，生成的路由缓存文件仅仅支持在应用的路由配置文件中定义的路由（包括方法定 义和配置定义） 清除缓存文件:1234567891) 如果需要清除应用的缓存文件，可以使用下面的命令： php think clear 不带任何参数调用clear命令的话，会清除 runtime 目录（包括模板缓存、日志文件及其子目录）下面的所 有的文件，但会保留目录。 2)如果需要清除某个指定目录下面的文件，可以使用： php think clear --path d:\\www\\tp5\\runtime\\log\\ 生成配置缓存文件:12345678910111)可以为应用或者模块生成配置缓存文件 php think optimize:config 默认生成应用的配置缓存文件，调用后会在runtime目录下面生成init.php文件，生成配置缓存文件 后，应用目录下面的config.php common.php以及tags.php不会被加载，被 runtime/init.php 取代。 2)如果需要生成某个模块的配置缓存，可以使用： php think optimize:config --module index 调用后会在runtime/index目录下面生成init.php文件，生成后，index模块目录下面的 config.php common.php以及tags.php不会被加载，被runtime/index/init.php取代 生成数据表字段缓存:123456789101112131415161718192021222324251)可以通过生成数据表字段信息缓存，提升数据库查询的性能，避免多余的查询。命令如下： php think optimize:schema 会自动生成当前数据库配置文件中定义的数据表字段缓存，也可以指定数据库生成字段缓存（必须有用户权限），例如，下面指定生成demo数据库下面的所有数据表的字段缓存信息 php think optimize:schema --db demo 执行后会自动在'runtime/schema'目录下面按照数据表生成字段缓存文 件。 如果你的应用使用了不同的数据库连接，可以根据模块来生成，如下： php think optimize:schema --module index 会读取index模块的模型来生成数据表字段缓存。 更新数据表字段缓存也是同样的方式，每次执行都会重新生成缓存。如果需要单独更新某个数据表的缓存， 可以使用： php think optimize:schema --table think_user 支持指定数据库名称 php think optimize:schema --table demo.think_user 更新Thinkphp5的版本输入指令：12345678910111213141516171819202122232425在项目根目录下输入 ：composer update --prefer-dist 若TP5出现大版本更新则需要手动更改 项目根目录下的composer.json（第20行）手动修改对应的最新版本号。 指令 描述 build 自动生成目录和文件 help 帮助 list 指令列表 clear 清除缓存指令 make:controller 创建控制器文件 make:model 创建模型文件 optimize:autoload 生成类库映射文件 optimize:config 生成配置缓存文件 optimize:route 生成路由缓存文件 optimize:schema 生成数据表字段缓存文件","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"thinkphp","slug":"thinkphp","permalink":"https://www.yszldf.cn/tags/thinkphp/"}]},{"title":"LNMP开启PHP加速扩展OPcache","slug":"LNMP开启PHP加速扩展OPcache","date":"2019-07-20T09:45:33.000Z","updated":"2019-07-20T09:56:08.583Z","comments":true,"path":"2019/07/20/LNMP开启PHP加速扩展OPcache/","link":"","permalink":"https://www.yszldf.cn/2019/07/20/LNMP开启PHP加速扩展OPcache/","excerpt":"","text":"lnmp集成环境下安装进入lnmp解压后的目录，执行： 1./addons.sh install opcache Opcache和eAccelerator是冲突的，脚本会卸载eAccelerator后再安装Opcache，回车确认后就会自动安装opcache。 卸载执行： 1./addons.sh uninstall opcache 配置安装好扩展后编辑php.ini文件 1vim /usr/local/php/etc/php.ini 在最下面的扩展那一块加上如下模块 123456789101112131415161718192021222324252627282930313233343536vim /usr/local/php/etc/php.inizend_extension=opcache.so[opcache];开启opcacheopcache.enable=1 ;CLI环境下，PHP启用OPcacheopcache.enable_cli=1;OPcache共享内存存储大小,单位MBopcache.memory_consumption=128 ;PHP使用了一种叫做字符串驻留（string interning）的技术来改善性能。例如，如果你在代码中使用了1000次字符串“foobar”，在PHP内部只会在第一使用这个字符串的时候分配一个不可变的内存区域来存储这个字符串，其他的999次使用都会直接指向这个内存区域。这个选项则会把这个特性提升一个层次——默认情况下这个不可变的内存区域只会存在于单个php-fpm的进程中，如果设置了这个选项，那么它将会在所有的php-fpm进程中共享。在比较大的应用中，这可以非常有效地节约内存，提高应用的性能。这个选项的值是以兆字节（megabytes）作为单位，如果把它设置为16，则表示16MB，默认是4MBopcache.interned_strings_buffer=8;这个选项用于控制内存中最多可以缓存多少个PHP文件。这个选项必须得设置得足够大，大于你的项目中的所有PHP文件的总和。设置值取值范围最小值是 200，最大值在 PHP 5.5.6 之前是 100000，PHP 5.5.6 及之后是 1000000。也就是说在200到1000000之间。opcache.max_accelerated_files=4000;设置缓存的过期时间（单位是秒）,为0的话每次都要检查opcache.revalidate_freq=60;从字面上理解就是“允许更快速关闭”。它的作用是在单个请求结束时提供一种更快速的机制来调用代码中的析构器，从而加快PHP的响应速度和PHP进程资源的回收速度，这样应用程序可以更快速地响应下一个请求。把它设置为1就可以使用这个机制了。opcache.fast_shutdown=1;如果启用（设置为1），OPcache会在opcache.revalidate_freq设置的秒数去检测文件的时间戳（timestamp）检查脚本是否更新。如果这个选项被禁用（设置为0），opcache.revalidate_freq会被忽略，PHP文件永远不会被检查。这意味着如果你修改了你的代码，然后你把它更新到服务器上，再在浏览器上请求更新的代码对应的功能，你会看不到更新的效果强烈建议你在生产环境中设置为0，更新代码后，再平滑重启PHP和web服务器。opcache.validate_timestamps=0 ;开启Opcache File Cache(实验性), 通过开启这个, 我们可以让Opcache把opcode缓存缓存到外部文件中, 对于一些脚本, 会有很明显的性能提升.这样PHP就会在/tmp目录下Cache一些Opcode的二进制导出文件, 可以跨PHP生命周期存在.opcache.file_cache=/tmp 然后重启PHP就可以了，service php-fpm restart More info: GOMore info: GO","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.yszldf.cn/categories/服务器/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yszldf.cn/tags/linux/"}]},{"title":"Linux查看服务器当前系统的ip连接数以及状态","slug":"Linux查看服务器当前系统的ip连接数以及状态","date":"2019-07-20T09:25:54.000Z","updated":"2019-07-20T09:28:02.406Z","comments":true,"path":"2019/07/20/Linux查看服务器当前系统的ip连接数以及状态/","link":"","permalink":"https://www.yszldf.cn/2019/07/20/Linux查看服务器当前系统的ip连接数以及状态/","excerpt":"","text":"查看linux当前系统连接ip数1netstat -n | awk '/^tcp/ &#123;n=split($(NF-1),array,\":\");if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf(\"%-20s %s\\n\",a, S[a]);++I&#125;printf(\"%-20s %s\\n\",\"TOTAL_IP\",I);for(a in s) printf(\"%-20s %s\\n\",a, s[a]);printf(\"%-20s %s\\n\",\"TOTAL_LINK\",N);&#125;' 查看NGINX的HTTP并发连接数以及状态123456789netstat -n|awk '/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'LAST_ACK 184SYN_RECV 159ESTABLISHED 11410FIN_WAIT1 61FIN_WAIT2 702CLOSING 1TIME_WAIT 478 针对以上参数说明，TCP状态描述：CLOSED：无连接是活动的或正在进行LISTEN：服务器在等待进入呼叫SYN_RECV：一个连接请求已经到达，等待确认SYN_SENT：应用已经开始，打开一个连接ESTABLISHED：正常数据传输状态FIN_WAIT1：应用说它已经完成FIN_WAIT2：另一边已同意释放ITMED_WAIT：等待所有分组死掉CLOSING：两边同时尝试关闭TIME_WAIT：另一边已初始化一个释放LAST_ACK：等待所有分组死掉","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.yszldf.cn/categories/服务器/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yszldf.cn/tags/linux/"}]},{"title":"LNMP下使用Jemalloc来优化MySQL、Nginx内存管理","slug":"LNMP下使用Jemalloc来优化MySQL、Nginx内存管理","date":"2019-07-20T09:13:58.000Z","updated":"2019-07-20T09:22:44.000Z","comments":true,"path":"2019/07/20/LNMP下使用Jemalloc来优化MySQL、Nginx内存管理/","link":"","permalink":"https://www.yszldf.cn/2019/07/20/LNMP下使用Jemalloc来优化MySQL、Nginx内存管理/","excerpt":"","text":"安装LNMP一键安装包里面已经集成了Jemalloc，在首次安装LNMP的时候就会提示是否安装和使用内存优化管理程序的。 (没有这个玩意，脚本里没找到，还是重新安装吧)如果安装LNMP时没有安装Jemalloc的话，可以使用LNMP的扩展安装脚本来安装，如下： 1./addons.sh jemalloc Redis默认就是使用Jemalloc的如果安装Redis的时候，LNMP环境没有集成Jemalloc的话，可以在安装完Jemalloc后重新安装、编译一下Redis即可自动重新编译加入Jemalloc的支持了，如下命令： 1./addons.sh redis 使用Jemalloc优化MySQL通过命令行修改mysqld_safe来让当前的MySQL来支持Jemalloc，如下命令： 12sed -i 's@executing mysqld_safe@executing mysqld_safe\\nexport LD_PRELOAD=/usr/local/lib/libjemalloc.so@' /usr/local/mysql/bin/mysqld_safeservice mysqld restart 使用Jemalloc优化NginxLNMP下安装Jemalloc后，只需要重新编译一下Nginx即可，命令如下： 12cd lnmp1.4./upgrade.sh nginx 最后验证Jemalloc是否已经生效并工作用如下命令查看： 1lsof -n | grep jemalloc 结果如下（类似即表明Jemalloc已经生效了）： 12345678910nginx 5398 root mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2nginx 5401 newblog mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2mysqld 6199 mysql mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2mysqld 6199 6200 mysql mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2mysqld 6199 6245 mysql mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2mysqld 6199 6254 mysql mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2mysqld 6199 6584 mysql mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2mysqld 6199 6762 mysql mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2mysqld 6199 6773 mysql mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2mysqld 6199 6774 mysql mem REG 8,1 2796824 152140 /usr/local/lib/libjemalloc.so.2","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.yszldf.cn/categories/服务器/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yszldf.cn/tags/linux/"}]},{"title":"Git忽略.idea/workspace.xml文件","slug":"Git忽略-idea-workspace-xml文件","date":"2019-07-20T09:06:33.000Z","updated":"2019-07-20T09:10:50.043Z","comments":true,"path":"2019/07/20/Git忽略-idea-workspace-xml文件/","link":"","permalink":"https://www.yszldf.cn/2019/07/20/Git忽略-idea-workspace-xml文件/","excerpt":"","text":"12345git忽略的原理： git设置本地忽略必须保证git的远程仓库分支上没有这个要忽略的文件，如果远程分支上存在这个文件，本地在设置ignore将不起作用。=========================================所以一般是在.gitignore 文件里面加入 .idea/ workspace.xml 即可，但是如果你在这样做之前已经将此文件提交到了git远程仓库，那就需要执行以下命令了：git rm -r --cached .idea","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"git","slug":"git","permalink":"https://www.yszldf.cn/tags/git/"}]},{"title":"Php解决vue跨域问题","slug":"Php解决vue跨域问题","date":"2019-07-20T08:58:40.000Z","updated":"2019-07-20T09:03:32.525Z","comments":true,"path":"2019/07/20/Php解决vue跨域问题/","link":"","permalink":"https://www.yszldf.cn/2019/07/20/Php解决vue跨域问题/","excerpt":"","text":"12345678910111213141516171819//// 准许跨域请求。$allow_origin = [ 'https://supplier.llyx.ink', 'https://dev-supplier.llyx.ink',];//跨域访问的时候才会存在此字段（多域名判断）$origin = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : '';if (in_array($origin, $allow_origin)) &#123; header(\"Access-Control-Allow-Origin: \" . $origin);&#125;header(\"Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE\");/** * 浏览器第一次在处理复杂请求的时候会先发起OPTIONS请求。路由在处理请求的时候会导致PUT请求失败。 * 在检测到option请求的时候就停止继续执行 */if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') &#123; header(\"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Authorization\"); exit;&#125;","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"php","slug":"php","permalink":"https://www.yszldf.cn/tags/php/"}]},{"title":"Windows设置控制台编码格式为UTF-8","slug":"Windows设置控制台编码格式为UTF-8","date":"2019-07-20T08:53:00.000Z","updated":"2019-07-20T08:57:26.114Z","comments":true,"path":"2019/07/20/Windows设置控制台编码格式为UTF-8/","link":"","permalink":"https://www.yszldf.cn/2019/07/20/Windows设置控制台编码格式为UTF-8/","excerpt":"","text":"12345678910111213141、运行CMD2、输入CHCP查看当前编码格式3、输入 CHCP 65001设置编码方式为UTF-84、右击控制台，选择属性，换个字体，保存。字体之后可以换回来。这样才能在打开新的页面的时候依然是UTF-8编码格式注：CHCP是一个计算机指令，能够显示或设置活动代码页编号。代码页 描述65001 UTF-8代码页950 繁体中文936 简体中文默认的GBK437 MS-DOS 美国英语","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.yszldf.cn/categories/服务器/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://www.yszldf.cn/tags/windows/"}]},{"title":"MySQL基础操作","slug":"MySQL基础操作","date":"2019-07-20T08:40:57.000Z","updated":"2019-07-20T08:51:36.741Z","comments":true,"path":"2019/07/20/MySQL基础操作/","link":"","permalink":"https://www.yszldf.cn/2019/07/20/MySQL基础操作/","excerpt":"","text":"登录123mysql -uroot -puse mysql;select user,host from user; 创建用户1234命令:CREATE USER 'username'@'host' IDENTIFIED BY 'password';PS：username - 你将创建的用户名host - 指定该用户在哪个主机上可以登陆，此处的\"localhost\"，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将\"localhost\"改为\"%\"，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器。 授权123命令: GRANT privileges ON databasename.tablename TO 'username'@'host';PS: privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;databasename - 数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*.例子: GRANT SELECT, INSERT ON mq.* TO 'dog'@'localhost'; 创建用户同时授权1234567mysql&gt; grant all privileges on mq.* to test@localhost identified by '1234';Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)PS:必须执行flush privileges; 设置与更改用户密码1命令:SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword'); 撤销用户权限1命令: REVOKE privilege ON databasename.tablename FROM 'username'@'host'; 删除用户1命令: DROP USER 'username'@'host';","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://www.yszldf.cn/tags/mysql/"}]},{"title":"Jenkins安装与使用","slug":"Jenkins安装与使用","date":"2019-07-19T08:22:11.000Z","updated":"2019-07-20T08:30:39.471Z","comments":true,"path":"2019/07/19/Jenkins安装与使用/","link":"","permalink":"https://www.yszldf.cn/2019/07/19/Jenkins安装与使用/","excerpt":"","text":"Ubuntu 下安装安装Java SDK1sudo apt-get install openjdk-11-jdk 安装Jenkins首先，我们将存储库密钥添加到系统 1wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add - 添加密钥后，系统将返回OK. 接下来，我们将Debian包存储库地址附加到服务器的sources.list ： 1echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list 当这两个都到位时，我们将运行update ，以便apt-get将使用新的存储库： 1sudo apt-get update 最后，我们将安装Jenkins及其依赖项，包括Java: 1sudo apt-get install jenkins 以上安装不成功的朋友，是由于Jenkins官网的校验码出现了问题。指定早期版本可以安装。 1sudo apt-get install jenkins=2.138.1 现在Jenkins及其依赖项已经到位，我们将启动Jenkins服务器 开始Jenkins使用systemctl我们将启动Jenkins： 1sudo systemctl start jenkins 由于systemctl不显示输出，我们将使用其status命令来验证它是否成功启动： 1sudo systemctl status jenkins 如果一切顺利，输出的开始应显示服务处于活动状态，并配置为启动时启动： 1234● jenkins.service - LSB: Start Jenkins at boot time Loaded: loaded (/etc/init.d/jenkins; bad; vendor preset: enabled) Active:active (exited) since Thu 2017-04-20 16:51:13 UTC; 2min 7s ago Docs: man:systemd-sysv-generator(8) 现在Jenkins正在运行，我们将调整防火墙规则，以便我们可以从网络浏览器到达Jenkins以完成初始设置 打开防火墙默认情况下，Jenkins在端口8080上运行,有时候由于端口占用需要修改如下：修改 /etc/default/jenkins 文件，将端口 8080 改成 8082 1HTTP_PORT=8082 重启Jenkins: 1sudo systemctl restart jenkins 设置Jenkins使用cat命令显示密码 1sudo cat /var/lib/jenkins/secrets/initialAdminPassword","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://www.yszldf.cn/tags/jenkins/"}]},{"title":"SeasLog安装与使用","slug":"SeasLog安装与使用","date":"2019-07-19T07:53:54.000Z","updated":"2019-07-19T08:14:04.574Z","comments":true,"path":"2019/07/19/SeasLog安装与使用/","link":"","permalink":"https://www.yszldf.cn/2019/07/19/SeasLog安装与使用/","excerpt":"","text":"Linux 下安装下载地址 https://pecl.php.net/package/seaslog SeasLog-1.9.0.tgz 12345tar -zxvf SeasLog-1.9.0.tgzcd SeasLog-1.9.0 # 进入 SeasLog 目录/usr/local/php/bin/phpize # php安装后的路径./configure --with-php-config=/usr/local/php/bin/php-configmake &amp;&amp; make install 修改php.ini文件 1234vi /usr/local/php/etc/php.ini#增加如下内容:extension_dir = \"/usr/local/php/lib/php/extensions/no-debug-zts-20090626\"（默认可以不加）extension=seasLog.so（必加） Windows 下安装下载地址 https://pecl.php.net/package/SeasLog/1.6.9/windows下载之后 把里面的php_seaslog.dll拷贝到PHP的安装目录下的ext里然后打开php.ini进行配置 1extension=php_seaslog.dll","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"seasLog","slug":"seasLog","permalink":"https://www.yszldf.cn/tags/seasLog/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-06-14T07:41:20.436Z","updated":"2019-06-14T07:41:20.436Z","comments":true,"path":"2019/06/14/hello-world/","link":"","permalink":"https://www.yszldf.cn/2019/06/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"HBJ-ERP-项目展示","slug":"HBJ-ERP-项目展示","date":"2019-02-24T17:39:00.000Z","updated":"2019-06-14T07:41:20.390Z","comments":true,"path":"2019/02/25/HBJ-ERP-项目展示/","link":"","permalink":"https://www.yszldf.cn/2019/02/25/HBJ-ERP-项目展示/","excerpt":"","text":"部分代码展示： 接口展示：","categories":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/categories/项目展示/"}],"tags":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/tags/项目展示/"}]},{"title":"得力之家-项目展示","slug":"得力之家-项目展示","date":"2019-02-24T16:20:34.000Z","updated":"2019-06-14T07:41:21.046Z","comments":true,"path":"2019/02/25/得力之家-项目展示/","link":"","permalink":"https://www.yszldf.cn/2019/02/25/得力之家-项目展示/","excerpt":"","text":"项目展示：得力之家APP.pptx 展示地址：GO账号：sysadmin密码：ysz1002","categories":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/categories/项目展示/"}],"tags":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/tags/项目展示/"}]},{"title":"中小型企业服务管理平台-项目展示","slug":"中小型企业服务管理平台-项目展示","date":"2019-02-24T16:14:15.000Z","updated":"2019-06-14T07:41:20.943Z","comments":true,"path":"2019/02/25/中小型企业服务管理平台-项目展示/","link":"","permalink":"https://www.yszldf.cn/2019/02/25/中小型企业服务管理平台-项目展示/","excerpt":"","text":"项目展示：中小型企业服务管理平台docx 后台管理页面：","categories":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/categories/项目展示/"}],"tags":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/tags/项目展示/"}]},{"title":"智能oa移动办公管理系统-项目展示","slug":"智能oa移动办公管理系统-项目展示","date":"2019-02-24T15:57:58.000Z","updated":"2019-06-14T07:41:21.151Z","comments":true,"path":"2019/02/24/智能oa移动办公管理系统-项目展示/","link":"","permalink":"https://www.yszldf.cn/2019/02/24/智能oa移动办公管理系统-项目展示/","excerpt":"","text":"项目展示：智能OA办公管理系统PPT 注意展示地址：GO账号：见展示地址登录页密码：默认123456","categories":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/categories/项目展示/"}],"tags":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/tags/项目展示/"}]},{"title":"普惠金融服务平台-项目展示","slug":"普惠金融服务平台-项目展示","date":"2019-02-24T15:41:22.000Z","updated":"2019-06-14T07:41:21.050Z","comments":true,"path":"2019/02/24/普惠金融服务平台-项目展示/","link":"","permalink":"https://www.yszldf.cn/2019/02/24/普惠金融服务平台-项目展示/","excerpt":"","text":"项目展示：普惠服务平台项目展示PPT 后台管理登录页：","categories":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/categories/项目展示/"}],"tags":[{"name":"项目展示","slug":"项目展示","permalink":"https://www.yszldf.cn/tags/项目展示/"}]},{"title":"linux下docker下Nginx+Php+Mysql+Redis+Elasticsearch开发环境搭建","slug":"linux下docker下Nginx-Php-Mysql-Redis-Elasticsearch开发环境搭建","date":"2019-02-24T12:55:22.000Z","updated":"2019-07-20T09:11:37.518Z","comments":true,"path":"2019/02/24/linux下docker下Nginx-Php-Mysql-Redis-Elasticsearch开发环境搭建/","link":"","permalink":"https://www.yszldf.cn/2019/02/24/linux下docker下Nginx-Php-Mysql-Redis-Elasticsearch开发环境搭建/","excerpt":"","text":"1 docker 安装ubuntu 14.x 15.x12sudo apt-get updatecurl -sSL https://get.docker.io/ | sudo sh centos 6.x 7.x12sudo yum updatecurl -sSL https://get.docker.io/ | sudo sh 如果安装出现错误1FATA[0000] Error loading docker apparmor profile: fork/exec /sbin/apparmor_parser: no such file or directory () ; 安装apparmor软件即可 1sudo apt-get install apparmor 下面需要创建用户和所属用户组，根据1.4 设置 1Warning: The docker group is equivalent to the root user; For details on how this impacts security in your system, see Docker Daemon Attack Surface for details. 设置用户和组12sudo useradd -g docker dockersudo usermod -aG docker docker 2 docker 启动旧启动方式centos 6.x ,ubuntu 14.x 1sudo service docker start 新的启动方式1sudo systemctl start docker 停止12345#centos 7.x ,ubuntu 15.xsudo systemctl stop docker或#centos 6.x ,ubuntu 14.xsudo service docker stop 重启12345#centos 7.x ,ubuntu 15.xsudo systemctl restart docker或#centos 6.x ,ubuntu 14.xsudo service docker restart docker状态12345#centos 7.x ,ubuntu 15.xsudo systemctl status docker或#centos 6.x ,ubuntu 14.xsudo service docker status docker 版本1sudo docker -v 3 相关配置配置文件增加参数 1sudo vi /etc/default/docker 在配置文件中添加或修改 1DOCKER=\"/usr/bin/docker\" 增加完成后，重启docker 1sudo systemctl restart docker 4 镜像拉取注意：如果拉取时间过长，docker hub 会自动切断链接，它会报超时错误！这个时候再重新执行拉取命令即可，他会接着上次拉取断的位置重新拉取的 mysql12#来自 https://hub.docker.com/_/mysql/sudo docker pull mysql:5.6 拉取时间根据每人的网速有关项目都是根据 mysql 5.6 版本的，所以这里选择5.6版本mysql:5.6 表示 镜像名称:版本号 redis12#来自 https://hub.docker.com/_/redis/sudo docker pull redis redis 后面没有版本号时，默认拉取最新的一版 即 redis:latest ElasticSearch12#来自 https://hub.docker.com/_/elasticsearch/sudo docker pull elasticsearch elasticsearch 后面没有版本号时，默认拉取最新的一版 即 elasticsearch:latest nginx 和php12#来自 https://hub.docker.com/r/foxiswho/nginx-phpsudo docker pull foxiswho/nginx-php lanmps 后面没有版本号时，默认拉取最新的一版 即 lanmps:latestnginx 版本 1.8.0php 版本 5.6.x memcached有同学可能会使用这个缓存，需要的拿去我们目前项目没有使用它 12#来自 https://hub.docker.com/_/memcached/sudo docker pull memcached 镜像拉取相关问题拉取不成功时：重新执行拉取命令 哪种为拉取不成功：repository与tag为none 5 镜像查看1sudo docker images 6 生成容器mysql1sudo docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.6 –name 容器名称 mysql 为自定义名称 -p:暴露端口，映射端口(可以映射多个端口) 外部端口容器内部端口 -p 3306:3306 映射端口 -e:设置任意环境变量(容器内) MYSQL_ROOT_PASSWORD=root 这里指 设置数据库密码为root mysql:5.6 镜像名称:版本 redis1sudo docker run --name redis -p 6379:6379 -d redis:latest redis 为自定义名称-p 6379:6379 映射端口， 即 外部端口:容器内端口redis:latest 镜像名称:版本 ElasticSearch1sudo docker run --name es -p 9200:9200 -p 9300:9300 -d elasticsearch:latest es 为自定义名称-p 9200:9200 映射端口(可以映射多个端口)， 即 外部端口:容器内端口elasticsearch:latest 镜像名称:版本 Nginx+PHP方式一 容器内链接1docker run --name lanmps --link mysql:db --link es:es --link redis:redis -p 80:80 -v /home/lanmps/www:/www/wwwroot -d foxiswho/nginx-php –name 容器名称 –name lanmps 名为lanmps的容器 -p:暴露端口，映射端口(可以映射多个端口) 外部端口：容器内部端口 -p 80:80 外部80端口:容器内部80端口 -d:后台模式运行，如果没有则以前台运行（当前进程关闭后，当前容器自动关闭）foxiswho/nginx-php 镜像名称:版本–link:容器内部通信 容器名称：内部别名（内部使用） –link mysql:db 使用时，直接使用db 就可以访问到数据库mysql容器php 访问本地mysql 使用的是localhost，容器内部即可使用 db -v:卷，外部目录虚拟到容器内目录 外部目录：容器内目录 -v /home/lanmps/www:/www/wwwroot/home/lanmps/www 外部目录，我的项目目录/www/wwwroot 容器内部目录，这个是不能改变的 注意本地 目录设置权限和用户组chown -R www:www /home/lanmps/wwwchmod -R 777 /home/lanmps/www这个时候访问本机 127.0.0.1:80 就可以看到 你的项目站点了 方式二 使用IP端口连接注意使用IP端口连接，必须是固定IP才可以 1docker run --name lanmps -p 80:80 -v /home/lanmps/www:/www/wwwroot -d foxiswho/nginx-php 例如 本机ip 为 192.168.1.122那么在链接 数据库3306 的时候，ip设置为192.168.1.122，端口号 3306 注意本地 目录设置权限和用户组chown -R www:www /home/lanmps/wwwchmod -R 777 /home/lanmps/www这个时候访问本机 127.0.0.1:80 就可以看到 你的项目站点了 7 容器命令 普通情况下容器创建时，该容器就会是启动状态，如果关机了，那么就要启动该容器 容器启动先启动没有任何链接的容器，最后启动 有关联的容器123456sudo docker start 容器名称sudo docker start redissudo docker start mysqlsudo docker start essudo docker start lanmps 容器关闭123sudo docker stop 容器名称sudo docker stop es 容器重启123sudo docker restart 容器名称sudo docker restart es 容器删除1sudo docker rm 容器名称 删除所有容器1docker rm $(docker ps -q -a) 进入容器内部1sudo docker exec -it lanmps /bin/bash 查看 正在运行的容器1sudo docker ps 查看 所有容器1sudo docker ps -a 8 docker 镜像命令所有镜像1sudo docker images 删除镜像1sudo docker rmi lanmps 删除所有镜像1docker rmi $(docker images -q) 9 docker 容器导入与导出 导出后再导入 的镜像会丢失所有的历史 导出 export Export命令用于持久化容器（不是镜像） 123456#1.先查看 所有容器sudo docker ps -a#2.找到要导出容器 的 CONTAINER ID，然后执行命令sudo docker export 容器CONTAINER ID &gt; 导出地址文件名即sudo docker export 234wer2323dfdfdsfq &gt; /home/export.tar 导入 import1cat /home/export.tar | sudo docker import - lanmps:latest 10 docker 镜像保存与加载 保存后再加载（saveed-loaded）的镜像没有丢失历史和层(layer) 保存 save Save命令用于持久化镜像（不是容器） 123456#1.先查看 所有镜像sudo docker images#2.找到要保存的镜像名称sudo docker save 镜像名称 &gt; 保存地址文件名即sudo docker save lanmps &gt; /home/save-lanmps.tar 加载1docker load &lt; /home/save-lanmps.tar 访问项目站点因为lanmps 设置的端口为80，那么就可以直接 在浏览器上 输入 127.0.0.1，就可以看到 你的项目站点了 nginx docker内配置文件位置配置文件位置： 1/etc/nginx/nginx.conf php docker内配置文件位置配置文件及目录位置: 123/usr/local/etc/php-fpm.conf/usr/local/etc/php-fpm.d/www.conf/usr/local/etc/php-fpm.d 目录 php.ini 默认加载目录位置1/usr/local/etc/php/conf.d/ 目录 扩展目录位置1/usr/local/lib/php/extensions/ More info: GO","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.yszldf.cn/categories/服务器/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yszldf.cn/tags/linux/"},{"name":"docker","slug":"docker","permalink":"https://www.yszldf.cn/tags/docker/"}]},{"title":"Php指定时间戳/日期加一天，一年，一周，一月","slug":"Php指定时间戳-日期加一天，一年，一周，一月","date":"2019-02-24T12:19:58.000Z","updated":"2019-06-14T07:41:20.741Z","comments":true,"path":"2019/02/24/Php指定时间戳-日期加一天，一年，一周，一月/","link":"","permalink":"https://www.yszldf.cn/2019/02/24/Php指定时间戳-日期加一天，一年，一周，一月/","excerpt":"","text":"123456789101112131415161718192021222324&lt;?phpecho date('Y-m-d H:i:s',strtotime('now'));//当前时间戳 2017-01-09 21:04:11echo date('Y-m-d H:i:s',strtotime('+1second'));//当前时间戳+1秒 2017-01-09 21:04:12echo date('Y-m-d H:i:s',strtotime('+1minute'));//当前时间戳+1分 2017-01-09 21:05:11echo date('Y-m-d H:i:s',strtotime('+1hour'));//当前时间戳+1小时 2017-01-09 22:04:11echo date('Y-m-d H:i:s',strtotime('+1day'));//当前时间戳+1天 2017-01-10 21:04:11echo date('Y-m-d H:i:s',strtotime('+1week'));//当前时间戳+1周 2017-01-16 21:04:11echo date('Y-m-d H:i:s',strtotime('+1month'));//当前时间戳+1月 2017-02-09 21:04:11echo date('Y-m-d H:i:s',strtotime('+1year'));//当前时间戳+1年 2018-01-09 21:04:11echo date('Y-m-d H:i:s',strtotime('+12year 12month 12day 12hour 12minute 12second'));//当前时间戳+12年，12月，12天，12小时，12分，12秒 2030-01-22 09:16:23$t=1483967416;//指定时间戳echo $dt=date('Y-m-d H:i:s',$t);//2017-01-09 21:10:16/*方法一*/echo date('Y-m-d H:i:s',$t+1*24*60*60);//指定时间戳+1天 2017-01-10 21:10:16echo date('Y-m-d H:i:s',$t+365*24*60*60);//指定时间戳+1年 2018-01-09 21:10:16/*方法二*///$dt是指定时间戳格式化后的日期echo date('Y-m-d H:i:s',strtotime(\"$dt+1day\"));//指定时间戳+1天 2017-01-10 21:10:16echo date('Y-m-d H:i:s',strtotime(\"$dt+1year\"));//指定时间戳+1年 2018-01-09 21:10:16/*方法三*///$t是指定时间戳echo date('Y-m-d H:i:s',strtotime(\"+1day\",$t));//指定时间戳+1天 2017-01-10 21:10:16echo date('Y-m-d H:i:s',strtotime(\"+1year\",$t));//指定时间戳+1年 2018-01-09 21:10:16//指定时间戳加1月、1周、1小时、1分、1秒原理同上；","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"php","slug":"php","permalink":"https://www.yszldf.cn/tags/php/"}]},{"title":"Ueditor相关问题","slug":"Ueditor相关问题","date":"2019-02-21T10:01:21.000Z","updated":"2019-06-14T07:41:20.841Z","comments":true,"path":"2019/02/21/Ueditor相关问题/","link":"","permalink":"https://www.yszldf.cn/2019/02/21/Ueditor相关问题/","excerpt":"","text":"Ueditor上传图片问题问题描述上传的图片已经上传于服务器，但是提示上传失败 问题排除浏览器F12开发者模式查看发现/php/controller.php?action=uploadimage报502错误 逐步断点排查发现如果注释掉iconv(‘unicode’, ‘utf-8’, $this-&gt;stateMap[‘ERROR_TYPE_NOT_ALLOWED’])代码之后问题消失。 问题原因可能是iconv函数运行时抛出错误导致 解决办法ueditor的github上面已经更新了代码，但是最新版的ueditor的源码中的代码还没有更新。 1234将iconv('unicode','utf-8',$this-&gt;stateMap['ERROR_TYPE_NOT_ALLOWED']);替换为mb_convert_encoding($this-&gt;stateMap['ERROR_TYPE_NOT_ALLOWED'],'utf-8','auto'); Ueditor视频问题问题描述上传视频不能播放 问题排除前端页面video标签的src属性为空，我就去后台重新上传了一次视频，前端刷新后，视频可以看了。但是后台修改或者调整视频位置的时候，src就消失了。 解决办法Ueditro.config.jsline366，whitList改为whiteList ueditor.all.js把preload改为’meta’","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"php","slug":"php","permalink":"https://www.yszldf.cn/tags/php/"}]},{"title":"JavaScript正则表达式限制输入框","slug":"JavaScript正则表达式限制输入框","date":"2019-02-21T09:40:08.000Z","updated":"2019-06-14T07:41:20.495Z","comments":true,"path":"2019/02/21/JavaScript正则表达式限制输入框/","link":"","permalink":"https://www.yszldf.cn/2019/02/21/JavaScript正则表达式限制输入框/","excerpt":"","text":"输入框只能输入数字12&lt;input type=\"text\" onkeyup=\"this.value=this.value.replace(/[^\\d]/g,'') \" onafterpaste=\"this.value=this.value.replace(/[^\\d]/g,'') \" name=\"f_order\" value=\"1\"/&gt;#其中，onafterpaste防止用户从其它地方copy内容粘贴到输入框 输入框只能输入字母和下横线1&lt;input onkeyup=\"this.value=this.value.replace(/[^_a-zA-Z]/g,'')\" onpaste=\"this.value=this.value.replace(/[^_a-zA-Z]/g,'')\"&gt; 输入框只能输入字母数字和下横线123&lt;input onkeyup=\"this.value=this.value.replace(/[^\\w]/g,'')\" onpaste=\"this.value=this.value.replace(/[^\\w]/g,'')\"&gt;或&lt;input onkeyup=\"this.value=this.value.replace(/[\\W]/g,'')\" onpaste=\"this.value=this.value.replace(/[\\W]/g,'')\"&gt; 输入框只能输入数字和英文123456789&lt;input onkeyup=\"value=value.replace(/[\\W]/g,'') \"onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\d]/g,''))\"&gt; 只能输入数字的： &lt;input onkeyup=\"value=value.replace(/[^\\d]/g,'') \"onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\d]/g,''))\"&gt; 只能输入全角的： &lt;input onkeyup=\"value=value.replace(/[^\\uFF00-\\uFFFF]/g,'')\" onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\uFF00-\\uFFFF]/g,''))\"&gt; 只能输入汉字的： &lt;input onkeyup=\"value=value.replace(/[^\\u4E00-\\u9FA5]/g,'')\" onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\u4E00-\\u9FA5]/g,''))\"&gt; 也可以这样： 输入数字和.，否则弹出输入有误 &lt;input type=text name= caolig value =\"\" onblur=\"if (!(/^[\\d]+\\.?\\d*$/.test(this.value)) )&#123;alert('您的输入有误'); this.value='';this.focus();&#125;\"&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://www.yszldf.cn/categories/前端/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://www.yszldf.cn/tags/javascript/"}]},{"title":"Linux服务器中mysql数据库数据恢复","slug":"Linux服务器中mysql数据库数据恢复","date":"2019-02-18T17:49:04.000Z","updated":"2019-06-14T07:41:20.740Z","comments":true,"path":"2019/02/19/Linux服务器中mysql数据库数据恢复/","link":"","permalink":"https://www.yszldf.cn/2019/02/19/Linux服务器中mysql数据库数据恢复/","excerpt":"","text":"准备恢复数据文件1234567mysql -u root -p //进入数据库use dckj; //进入数据表show tables; //查看此时数据库情况show binary logs; //查看二进制日志show binlog events in 'mysql-bin.000015'; //查看mysql-bin.000015具体内容/usr/local/mysql/var/mysql-bin.000015 //服务器中日志存放路径 恢复数据服务器中输入（start-position指日志中语句开始的行数）： 1/usr/local/mysql/bin/mysqlbinlog --start-position='4311393' --stop-position='4250819' /usr/local/mysql/var/mysql-bin.000015 | mysql -u root -p","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yszldf.cn/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"https://www.yszldf.cn/tags/mysql/"}]},{"title":"Workerman安装使用","slug":"Workerman安装使用","date":"2019-02-16T18:07:37.000Z","updated":"2019-06-14T07:41:20.943Z","comments":true,"path":"2019/02/17/Workerman安装使用/","link":"","permalink":"https://www.yszldf.cn/2019/02/17/Workerman安装使用/","excerpt":"","text":"安装说明WorkerMan实际上就是一个PHP代码包，如果你的PHP环境已经装好，只需要把WorkerMan源代码或者demo下载下来即可运行。 windows用户（必读）windows用户需要使用windows版本的workerman，windows版本workerman本身不依赖任何扩展，只需要配置好PHP环境变量即可，windows版本workerman安装及注意事项参见windows用户必看。 Linux系统环境检测Linux系统可以使用以下脚本测试本机PHP环境是否满足WorkerMan运行要求。 1curl -Ss http://www.workerman.net/check.php | php 上面脚本如果全部显示ok，则代表满足WorkerMan要求，直接到官网下载例子即可运行。如果不是全部ok，则参考下面文档安装缺失的扩展即可。若出现Function stream_socket_server may be disabled. Please check disable_functions in php.inisee http://doc3.workerman.net/faq/disable-function-check.html这里以lnmp集成安装包为例修改php.ini 修改PHP配置文件: 12vi /usr/local/php/etc/php.ini#去除disable_functions 后面的 stream_socket_server （注意：检测脚本中没有检测event扩展或者libevent扩展，如果业务并发连接数大于1024建议安装event扩展或者libevent扩展，安装方法参照下面说明） 已有PHP环境安装缺失扩展1.安装pcntl和posix扩展： centos系统如果php是通过yum安装的，则命令行运行 yum install php-process即可安装pcntl和posix扩展。 2.安装event或者libevent扩展： 为了能支持更大的并发连接数，建议安装event扩展或者libevent扩展(二者作用相同，二选一即可)。以Event为例，安装方法如下: centos系统 a.安装event扩展依赖的libevent-devel包，命令行运行 1yum install libevent-devel -y b.安装event扩展，命令行运行(event扩展要求PHP&gt;=5.4，PHP5.3用户请安装libevent扩展(libevent扩展同时支持php5.4-5.6)，见本页面底部) 1pecl install event 注意提示：Include libevent OpenSSL support [yes] : 时输入no回车，其它直接敲回车就行如果安装失败请跳过以下步骤，尝试安装libevent扩展，见本页面底部。 c.命令行运行（如果ini文件位置不对，可以通过运行php –ini找到实际加载的ini文件路径） 1echo extension=event.so &gt; /etc/php.d/30-event.ini 这里若是lnmp集成安装包写/usr/local/php/etc/php.ini More info: GO GatewayWorker安装Linux版安装 a、进入thinkphp5的目录，例cd /home/wwwroot/house.nbdeli.net/house，使用composer require workerman/gateway-worker 安装Linux版本的gatewayb、去官网下载Linux版的gateway-worker，里面有demo。 http://www.workerman.net/downloadc、将下载的压缩包解压，将Applications/Yourapp中的文件全部复制到thinkphp5目录application里面的任意文件夹，这里取名为pushd、将解压后的文件夹中的start.php复制到thinkphp5的根目录，即与application同级的目录e、将start.php文件中最后部分forearch循环括号内的路径改为自己的正确路径1__DIR__.'/application/push/start*.php' f、在命令行php start.php start 启动 以debug（调试）方式启动1php start.php start 以daemon（守护进程）方式启动1php start.php start -d 停止1php start.php stop 重启1php start.php restart 平滑重启1php start.php reload 查看状态1php start.php status 查看连接状态（需要Workerman版本&gt;=3.5.01php start.php connections More info: GO Workerman/MySQL说明常驻内存的程序在使用mysql时经常会遇到mysql gone away的错误，这个是由于程序与mysql的连接长时间没有通讯，连接被mysql服务端踢掉导致。本数据库类可以解决这个问题，当发生mysql gone away错误时，会自动重试一次。 依赖的扩展该mysql类依赖pdo和pdo_mysql两个扩展，缺少扩展会报Undefined class constant ‘MYSQL_ATTR_INIT_COMMAND’ in ….错误。命令行运行php -m会列出所有php cli已安装的扩展，如果没有pdo 或者 pdo_mysql，请自行安装。 centos系统PHP5.x 12yum install php-pdoyum install php-mysql PHP7.x 12yum install php70w-pdo_dblib.x86_64yum install php70w-mysqlnd.x86_64 如果找不到包名，请尝试用yum search php mysql查找 1、安装 Workerman/MySQL方法1：可以通过composer安装，命令行运行以下命令(composer源在国外，安装过程可能会非常慢)。1composer require workerman/mysql 上面命令成功后会生成vendor目录，然后在项目中引入vendor下的autoload.php。1require_once __DIR__ . '/vendor/autoload.php'; 方法2：下载源码，解压后的目录放到自己项目中(位置任意)，直接require源文件。1require_once '/your/path/of/mysql-master/src/Connection.php'; 注意强烈建议在onWorkerStart回调中初始化数据库连接，避免在Worker::runAll();运行前就初始化连接，在Worker::runAll();运行前初始化的连接属于主进程，子进程会继承这个连接，主进程和子进程共用相同的数据库连接会导致错误。示例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677use Workerman\\Worker;require_once __DIR__ . '/Workerman/Autoloader.php';require_once __DIR__ . '/vendor/autoload.php';$worker = new Worker('websocket://0.0.0.0:8484');$worker-&gt;onWorkerStart = function($worker)&#123; // 将db实例存储在全局变量中(也可以存储在某类的静态成员中) global $db; $db = new \\Workerman\\MySQL\\Connection('host', 'port', 'user', 'password', 'db_name');&#125;;$worker-&gt;onMessage = function($connection, $data)&#123; // 通过全局变量获得db实例 global $db; // 执行SQL $all_tables = $db-&gt;query('show tables'); $connection-&gt;send(json_encode($all_tables));&#125;;// 运行workerWorker::runAll();具体MySQL/Connection用法// 初始化db连接$db = new \\Workerman\\MySQL\\Connection('host', 'port', 'user', 'password', 'db_name');// 获取所有数据$db-&gt;select('ID,Sex')-&gt;from('Persons')-&gt;where('sex= :sex AND ID = :id')-&gt;bindValues(array('sex'=&gt;'M', 'id' =&gt; 1))-&gt;query();//等价于$db-&gt;select('ID,Sex')-&gt;from('Persons')-&gt;where(\"sex= 'M' AND ID = 1\")-&gt;query();//等价于$db-&gt;query(\"SELECT ID,Sex FROM `Persons` WHERE sex='M' AND ID = 1\");// 获取一行数据$db-&gt;select('ID,Sex')-&gt;from('Persons')-&gt;where('sex= :sex')-&gt;bindValues(array('sex'=&gt;'M'))-&gt;row();//等价于$db-&gt;select('ID,Sex')-&gt;from('Persons')-&gt;where(\"sex= 'M' \")-&gt;row();//等价于$db-&gt;row(\"SELECT ID,Sex FROM `Persons` WHERE sex='M'\");// 获取一列数据$db-&gt;select('ID')-&gt;from('Persons')-&gt;where('sex= :sex')-&gt;bindValues(array('sex'=&gt;'M'))-&gt;column();//等价于$db-&gt;select('ID')-&gt;from('Persons')-&gt;where(\"sex= 'F' \")-&gt;column();//等价于$db-&gt;column(\"SELECT `ID` FROM `Persons` WHERE sex='M'\");// 获取单个值$db-&gt;select('ID')-&gt;from('Persons')-&gt;where('sex= :sex')-&gt;bindValues(array('sex'=&gt;'M'))-&gt;single();//等价于$db-&gt;select('ID')-&gt;from('Persons')-&gt;where(\"sex= 'F' \")-&gt;single();//等价于$db-&gt;single(\"SELECT ID FROM `Persons` WHERE sex='M'\");// 复杂查询$db-&gt;select('*')-&gt;from('table1')-&gt;innerJoin('table2','table1.uid = table2.uid')-&gt;where('age &gt; :age')-&gt;groupBy(array('aid'))-&gt;having('foo=\"foo\"')-&gt;orderByASC/*orderByDESC*/(array('did'))-&gt;limit(10)-&gt;offset(20)-&gt;bindValues(array('age' =&gt; 13));// 等价于$db-&gt;query('SELECT * FROM `table1` INNER JOIN `table2` ON `table1`.`uid` = `table2`.`uid`WHERE age &gt; 13 GROUP BY aid HAVING foo=\"foo\" ORDER BY did LIMIT 10 OFFSET 20');// 插入$insert_id = $db-&gt;insert('Persons')-&gt;cols(array( 'Firstname'=&gt;'abc', 'Lastname'=&gt;'efg', 'Sex'=&gt;'M', 'Age'=&gt;13))-&gt;query();等价于$insert_id = $db-&gt;query(\"INSERT INTO `Persons` ( `Firstname`,`Lastname`,`Sex`,`Age`)VALUES ( 'abc', 'efg', 'M', 13)\");// 更新$row_count = $db-&gt;update('Persons')-&gt;cols(array('sex'))-&gt;where('ID=1')-&gt;bindValue('sex', 'F')-&gt;query();// 等价于$row_count = $db-&gt;update('Persons')-&gt;cols(array('sex'=&gt;'F'))-&gt;where('ID=1')-&gt;query();// 等价于$row_count = $db-&gt;query(\"UPDATE `Persons` SET `sex` = 'F' WHERE ID=1\");// 删除$row_count = $db-&gt;delete('Persons')-&gt;where('ID=9')-&gt;query();// 等价于$row_count = $db-&gt;query(\"DELETE FROM `Persons` WHERE ID=9\");// 事务$db-&gt;beginTrans();....$db-&gt;commitTrans(); // or $db-&gt;rollBackTrans(); More info: GO","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"workerman","slug":"workerman","permalink":"https://www.yszldf.cn/tags/workerman/"}]},{"title":"Redis安装使用","slug":"Redis安装使用","date":"2019-02-16T17:25:52.000Z","updated":"2019-07-19T07:26:41.734Z","comments":true,"path":"2019/02/17/Redis安装使用/","link":"","permalink":"https://www.yszldf.cn/2019/02/17/Redis安装使用/","excerpt":"","text":"Ubuntu 下安装123456789101112131415安装：sudo apt-get updatesudo apt-get install redis-server启动：/etc/init.d/redis-server start若是lnmp 环境下：/etc/init.d/redis &#123;start|stop|restart|kill&#125;配置文件目录:/usr/local/redis/etc/redis.confredis 开启远程访问：注释 bind 127.0.0.1修改 protected-mode no杀死redis进程：ps -ef | grep redis #找出redis进程 root 20910 27214 0 14:33 pts/0 00:00:00 grep --color=auto rediskill -9 20910 Windows 下安装下载地址：https://github.com/MSOpenTech/redis/releases ,Redis-x64-3.2.100.zip 1234启动:D:cd redisredis-server.exe redis.windows.conf Linux 下安装下载地址：http://redis.io/download ,下载最新文档版本。本教程使用的最新文档版本为 4.0.1，下载并安装： 1234wget http://download.redis.io/releases/redis-4.0.1.tar.gztar xzf redis-4.0.1.tar.gzcd redis-4.0.1make make完后 redis-4.0.1目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：下面启动redis服务： 123456cd src./redis-server#注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。cd src./redis-server redis.conf#redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。 启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如： 123456cd src./redis-cliredis&gt; set foo barOKredis&gt; get foo\"bar\" More info: GO PHP 使用 RedisPHP安装redis扩展 1234567wget https://github.com/phpredis/phpredis/archive/2.2.4.tar.gzcd phpredis-2.2.7 # 进入 phpredis 目录/usr/local/php/bin/phpize # php安装后的路径./configure --with-php-config=/usr/local/php/bin/php-configmake &amp;&amp; make install#如果你是 PHP7 版本，则需要下载指定分支：git clone -b php7 https://github.com/phpredis/phpredis.git 修改php.ini文件 1234vi /usr/local/php/lib/php.ini#增加如下内容:extension_dir = \"/usr/local/php/lib/php/extensions/no-debug-zts-20090626\"（默认可以不加）extension=redis.so（必加） 安装完成后重启php-fpm 或 apache。查看phpinfo信息，就能看到redis扩展。 连接到 redis 服务 1234567891011&lt;?php //连接本地的 Redis 服务 $redis = new Redis(); $redis-&gt;connect('127.0.0.1', 6379); echo \"Connection to server sucessfully\"; //查看服务是否运行 echo \"Server is running: \" . $redis-&gt;ping();?&gt;#执行脚本，输出结果为：Connection to server sucessfullyServer is running: PONG Redis PHP String(字符串) 实例 12345678910111213&lt;?php //连接本地的 Redis 服务 $redis = new Redis(); $redis-&gt;connect('127.0.0.1', 6379); echo \"Connection to server sucessfully\"; //设置 redis 字符串数据 $redis-&gt;set(\"tutorial-name\", \"Redis tutorial\"); // 获取存储的数据并输出 echo \"Stored string in redis:: \" . $redis-&gt;get(\"tutorial-name\");?&gt;#执行脚本，输出结果为：Connection to server sucessfullyStored string in redis:: Redis tutorial Redis PHP List(列表) 实例 1234567891011121314151617181920&lt;?php //连接本地的 Redis 服务 $redis = new Redis(); $redis-&gt;connect('127.0.0.1', 6379); echo \"Connection to server sucessfully\"; //存储数据到列表中 $redis-&gt;lpush(\"tutorial-list\", \"Redis\"); $redis-&gt;lpush(\"tutorial-list\", \"Mongodb\"); $redis-&gt;lpush(\"tutorial-list\", \"Mysql\"); // 获取存储的数据并输出 $arList = $redis-&gt;lrange(\"tutorial-list\", 0 ,5); echo \"Stored string in redis\"; print_r($arList);?&gt;#执行脚本，输出结果为：Connection to server sucessfullyStored string in redisMysqlMongodbRedis Redis PHP Keys 实例 123456789101112131415&lt;?php //连接本地的 Redis 服务 $redis = new Redis(); $redis-&gt;connect('127.0.0.1', 6379); echo \"Connection to server sucessfully\"; // 获取数据并输出 $arList = $redis-&gt;keys(\"*\"); echo \"Stored keys in redis:: \"; print_r($arList);?&gt;#执行脚本，输出结果为：Connection to server sucessfullyStored string in redis::tutorial-nametutorial-list More info: GO","categories":[{"name":"后端","slug":"后端","permalink":"https://www.yszldf.cn/categories/后端/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://www.yszldf.cn/tags/redis/"}]},{"title":"Linux上iptables防火墙的配置","slug":"Linux上iptables防火墙的配置","date":"2019-02-16T16:49:15.000Z","updated":"2019-06-14T07:41:20.581Z","comments":true,"path":"2019/02/17/Linux上iptables防火墙的配置/","link":"","permalink":"https://www.yszldf.cn/2019/02/17/Linux上iptables防火墙的配置/","excerpt":"","text":"安装iptables防火墙如果没有安装iptables需要先安装，CentOS执行 1yum install iptables Debian/Ubuntu执行： 1apt-get install iptables 清除已有iptables规则123iptables -Fiptables -Xiptables -Z 开放指定的端口12345678910111213141516171819202122-A和-I参数分别为添加到规则末尾和规则最前面。#允许本地回环接口(即运行本机访问本机)iptables -A INPUT -i lo -j ACCEPT# 允许已建立的或相关连的通行iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT#允许所有本机向外的访问iptables -A OUTPUT -j ACCEPT# 允许访问22端口iptables -A INPUT -p tcp --dport 22 -j ACCEPT#允许访问80端口iptables -A INPUT -p tcp --dport 80 -j ACCEPT#允许访问443端口iptables -A INPUT -p tcp --dport 443 -j ACCEPT#允许FTP服务的21和20端口iptables -A INPUT -p tcp --dport 21 -j ACCEPTiptables -A INPUT -p tcp --dport 20 -j ACCEPT#如果有其他端口的话，规则也类似，稍微修改上述语句就行#允许pingiptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT#禁止其他未允许的规则访问iptables -A INPUT -j REJECT #（注意：如果22端口未加入允许规则，SSH链接会直接断开。）iptables -A FORWARD -j REJECT 屏蔽IP123456789#如果只是想屏蔽IP的话“3、开放指定的端口”可以直接跳过。#屏蔽单个IP的命令是iptables -I INPUT -s 123.45.6.7 -j DROP#封整个段即从123.0.0.1到123.255.255.254的命令iptables -I INPUT -s 123.0.0.0/8 -j DROP#封IP段即从123.45.0.1到123.45.255.254的命令iptables -I INPUT -s 124.45.0.0/16 -j DROP#封IP段即从123.45.6.1到123.45.6.254的命令是iptables -I INPUT -s 123.45.6.0/24 -j DROP 查看已添加的iptables规则1234iptables -L -n#v：显示详细信息，包括每条规则的匹配包数量和匹配字节数#x：在 v 的基础上，禁止自动单位换算（K、M） vps侦探#n：只显示IP地址和端口号，不将ip解析为域名 删除已添加的iptables规则1234#将所有iptables以序号标记显示，执行：iptables -L -n --line-numbers#比如要删除INPUT里序号为8的规则，执行：iptables -D INPUT 8 iptables的开机启动及规则保存CentOS上可能会存在安装好iptables后，iptables并不开机自启动，要加入开机启动，可以执行一下： 1chkconfig --level 345 iptables on 修改iptables配置 12345678910111213vi /etc/sysconfig/iptables#保存规则CentOS上可以执行service iptables save #另外更需要注意的是Debian/Ubuntu上iptables是不会保存规则的#需要按如下步骤进行，让网卡关闭是保存iptables规则，启动时加载iptables规则：#创建/etc/network/if-post-down.d/iptables 文件，添加如下内容：#!/bin/bashiptables-save &gt; /etc/iptables.rules#执行：chmod +x /etc/network/if-post-down.d/iptables 添加执行权限。#创建/etc/network/if-pre-up.d/iptables 文件，添加如下内容：#!/bin/bashiptables-restore &lt; /etc/iptables.rules#执行：chmod +x /etc/network/if-pre-up.d/iptables 添加执行权限。 CentOS切换为iptables防火墙切换到iptables首先应该关掉默认的firewalld，然后安装iptables服务。 关闭firewall： 12service firewalld stopsystemctl disable firewalld.service #禁止firewall开机启动 安装iptables防火墙服务 1yum install iptables-services #安装 编辑iptables防火墙配置 123vi /etc/sysconfig/iptables #编辑防火墙配置文件service iptables restart #开启 systemctl enable iptables.service #设置防火墙开机启动","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.yszldf.cn/categories/服务器/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yszldf.cn/tags/linux/"}]},{"title":"Centos7部署LNMP+SSL服务器","slug":"Centos7部署LNMP-SSL服务器","date":"2019-02-16T15:32:46.000Z","updated":"2019-06-14T07:41:20.324Z","comments":true,"path":"2019/02/16/Centos7部署LNMP-SSL服务器/","link":"","permalink":"https://www.yszldf.cn/2019/02/16/Centos7部署LNMP-SSL服务器/","excerpt":"","text":"关闭防火墙12sed -i \"s/SELINUX=enforcing/SELINUX=disabled/\" /etc/selinux/configsetenforce 0 防火墙配置 1234firewall-cmd --permanent --add-port=80/tcpfirewall-cmd --permanent --add-service=httpfirewall-cmd --permanent --add-service=httpsfirewall-cmd --reload 安装nginx安装nginx rpm包 1rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 正式安装nginx 1yum install -y nginx 重启nginx 1systemctl restart nginx 设置开机自启动 1systemctl enable nginx 安装php7安装php-fpm的依赖 1yum install net-tools gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel git gcc wget -y 安装epel-release 1yum -y install epel-release 1rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 正式安装php7 1yum -y install php71w-fpm php71w-cli php71w-gd php71w-mcrypt php71w-mysql php71w-pear php71w-xml php71w-mbstring php71w-pdo php71w-json php71w-pecl-apcu php71w-pecl-apcu-devel 查看php版本 1php -v 配置nginx配置 1234567891011121314#修改nginx用户，在第 8 行和第 10行，user 和 group 赋值为 nginx。vim /etc/php-fpm.d/www.confuser = nginxgroup = nginx#在第 22 行，确保 php-fpm 运行在指定端口。listen = 127.0.0.1:9000#取消第 366-370 行的注释，启用 php-fpm 的系统环境变量。env[HOSTNAME] = $HOSTNAMEenv[PATH] = /usr/local/bin:/usr/bin:/binenv[TMP] = /tmpenv[TMPDIR] = /tmpenv[TEMP] = /tmp php配置 1234#新建php缓存文件夹mkdir -p /var/lib/php/session#设置文件夹及子目录文件所属用户组chown nginx:nginx -R /var/lib/php/session/ 重启php、nginx,并设置开机自启动 1234sudo systemctl start php-fpmsudo systemctl start nginxsudo systemctl enable php-fpmsudo systemctl enable nginx 安装mariadb安装mariadb 1yum -y install mariadb mariadb-server 启动并设置mariadb开机自启动 12systemctl start mariadbsystemctl enable mariadb 配置SSL创建SSL证书文件夹 1mkdir -p /etc/nginx/cert/ 根据私钥pri_key.pem生产一个新的证书请求文件并保存 1openssl req -new -x509 -days 365 -nodes -out /etc/nginx/cert/xxx.crt -keyout /etc/nginx/cert/xxx.key 配置证书目录权限 12chmod 700 /etc/nginx/certchmod 600 /etc/nginx/cert/* 配置网站目录所属用户组 12cd /usr/share/nginx/html/chown nginx:nginx -R xxx/ 配置虚拟主机 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091cd /etc/nginx/conf.d/vim xxx.confserver &#123; listen 80; server_name www.nbdeli.com; return 301 https://$server_name$request_uri;&#125;server &#123; listen 443; server_name www.nbdeli.com; ssl on; ssl_certificate /etc/nginx/cert/nbdeli.com.crt; ssl_certificate_key /etc/nginx/cert/nbdeli.com.key; add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; access_log /home/wwwlog/$server_name.access.log main; location = /robots.txt &#123; allow all; log_not_found off; access_log off; &#125; location = /.well-known/carddav &#123; return 301 $scheme://$host/remote.php/dav; &#125; location = /.well-known/caldav &#123; return 301 $scheme://$host/remote.php/dav; &#125; client_max_body_size 512M; fastcgi_buffers 64 4K; gzip off; error_page 403 /core/templates/403.php; error_page 404 /core/templates/404.php; location / &#123; root /home/wwwroot/$server_name; index index.html index.htm index.php default.php; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; location ~ \\.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /home/wwwroot/$server_name$fastcgi_script_name; include fastcgi_params; &#125; location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123; deny all; &#125; location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123; deny all; &#125; location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123; include fastcgi_params; fastcgi_split_path_info ^(.+\\.php)(/.*)$; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param HTTPS on; fastcgi_param modHeadersAvailable true; fastcgi_param front_controller_active true; fastcgi_intercept_errors on; fastcgi_request_buffering off; &#125; location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123; try_files $uri/ =404; index index.php; &#125; location ~* \\.(?:css|js)$ &#123; try_files $uri /index.php$uri$is_args$args; add_header Cache-Control \"public, max-age=7200\"; add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; access_log off; &#125; location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123; try_files $uri /index.php$uri$is_args$args; access_log off; &#125;&#125; 测试nginx 1nginx -t 配置完nginx,记得重启nginx 1systemctl restart nginx","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.yszldf.cn/categories/服务器/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yszldf.cn/tags/linux/"}]}]}