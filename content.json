{"meta":{"title":"ShonnZong的博客","subtitle":null,"description":null,"author":"ShonnZong","url":"http://140.143.243.43"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-02-14T20:17:56.102Z","updated":"2019-02-14T20:17:56.102Z","comments":false,"path":"404/index.html","permalink":"http://140.143.243.43/404/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-02-14T18:17:20.602Z","updated":"2019-02-14T18:17:20.602Z","comments":false,"path":"about/index.html","permalink":"http://140.143.243.43/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-02-14T18:17:20.797Z","updated":"2019-02-14T18:17:20.797Z","comments":false,"path":"books/index.html","permalink":"http://140.143.243.43/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-02-14T18:17:20.859Z","updated":"2019-02-14T18:17:20.859Z","comments":false,"path":"categories/index.html","permalink":"http://140.143.243.43/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-02-14T18:17:21.053Z","updated":"2019-02-14T18:17:21.053Z","comments":true,"path":"links/index.html","permalink":"http://140.143.243.43/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-02-14T18:17:21.114Z","updated":"2019-02-14T18:17:21.114Z","comments":false,"path":"repository/index.html","permalink":"http://140.143.243.43/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-02-14T18:17:21.300Z","updated":"2019-02-14T18:17:21.300Z","comments":false,"path":"tags/index.html","permalink":"http://140.143.243.43/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Workerman安装使用","slug":"Workerman安装使用","date":"2019-02-16T18:07:37.000Z","updated":"2019-02-16T18:42:46.477Z","comments":true,"path":"2019/02/17/Workerman安装使用/","link":"","permalink":"http://140.143.243.43/2019/02/17/Workerman安装使用/","excerpt":"","text":"安装说明WorkerMan实际上就是一个PHP代码包，如果你的PHP环境已经装好，只需要把WorkerMan源代码或者demo下载下来即可运行。 windows用户（必读）windows用户需要使用windows版本的workerman，windows版本workerman本身不依赖任何扩展，只需要配置好PHP环境变量即可，windows版本workerman安装及注意事项参见windows用户必看。 Linux系统环境检测Linux系统可以使用以下脚本测试本机PHP环境是否满足WorkerMan运行要求。 1curl -Ss http://www.workerman.net/check.php | php 上面脚本如果全部显示ok，则代表满足WorkerMan要求，直接到官网下载例子即可运行。如果不是全部ok，则参考下面文档安装缺失的扩展即可。若出现Function stream_socket_server may be disabled. Please check disable_functions in php.inisee http://doc3.workerman.net/faq/disable-function-check.html这里以lnmp集成安装包为例修改php.ini 修改PHP配置文件: 12vi /usr/local/php/etc/php.ini#去除disable_functions 后面的 stream_socket_server （注意：检测脚本中没有检测event扩展或者libevent扩展，如果业务并发连接数大于1024建议安装event扩展或者libevent扩展，安装方法参照下面说明） 已有PHP环境安装缺失扩展1.安装pcntl和posix扩展： centos系统如果php是通过yum安装的，则命令行运行 yum install php-process即可安装pcntl和posix扩展。 2.安装event或者libevent扩展： 为了能支持更大的并发连接数，建议安装event扩展或者libevent扩展(二者作用相同，二选一即可)。以Event为例，安装方法如下: centos系统 a.安装event扩展依赖的libevent-devel包，命令行运行 1yum install libevent-devel -y b.安装event扩展，命令行运行(event扩展要求PHP&gt;=5.4，PHP5.3用户请安装libevent扩展(libevent扩展同时支持php5.4-5.6)，见本页面底部) 1pecl install event 注意提示：Include libevent OpenSSL support [yes] : 时输入no回车，其它直接敲回车就行如果安装失败请跳过以下步骤，尝试安装libevent扩展，见本页面底部。 c.命令行运行（如果ini文件位置不对，可以通过运行php –ini找到实际加载的ini文件路径） 1echo extension=event.so &gt; /etc/php.d/30-event.ini 这里若是lnmp集成安装包写/usr/local/php/etc/php.ini More info: GO GatewayWorker安装Linux版安装 a、进入thinkphp5的目录，例cd /home/wwwroot/house.nbdeli.net/house，使用composer require workerman/gateway-worker 安装Linux版本的gatewayb、去官网下载Linux版的gateway-worker，里面有demo。 http://www.workerman.net/downloadc、将下载的压缩包解压，将Applications/Yourapp中的文件全部复制到thinkphp5目录application里面的任意文件夹，这里取名为pushd、将解压后的文件夹中的start.php复制到thinkphp5的根目录，即与application同级的目录e、将start.php文件中最后部分forearch循环括号内的路径改为自己的正确路径1__DIR__.'/application/push/start*.php' f、在命令行php start.php start 启动 以debug（调试）方式启动1php start.php start 以daemon（守护进程）方式启动1php start.php start -d 停止1php start.php stop 重启1php start.php restart 平滑重启1php start.php reload 查看状态1php start.php status 查看连接状态（需要Workerman版本&gt;=3.5.01php start.php connections More info: GO Workerman/MySQL说明常驻内存的程序在使用mysql时经常会遇到mysql gone away的错误，这个是由于程序与mysql的连接长时间没有通讯，连接被mysql服务端踢掉导致。本数据库类可以解决这个问题，当发生mysql gone away错误时，会自动重试一次。 依赖的扩展该mysql类依赖pdo和pdo_mysql两个扩展，缺少扩展会报Undefined class constant ‘MYSQL_ATTR_INIT_COMMAND’ in ….错误。命令行运行php -m会列出所有php cli已安装的扩展，如果没有pdo 或者 pdo_mysql，请自行安装。 centos系统PHP5.x 12yum install php-pdoyum install php-mysql PHP7.x 12yum install php70w-pdo_dblib.x86_64yum install php70w-mysqlnd.x86_64 如果找不到包名，请尝试用yum search php mysql查找 1、安装 Workerman/MySQL方法1：可以通过composer安装，命令行运行以下命令(composer源在国外，安装过程可能会非常慢)。1composer require workerman/mysql 上面命令成功后会生成vendor目录，然后在项目中引入vendor下的autoload.php。1require_once __DIR__ . '/vendor/autoload.php'; 方法2：下载源码，解压后的目录放到自己项目中(位置任意)，直接require源文件。1require_once '/your/path/of/mysql-master/src/Connection.php'; 注意强烈建议在onWorkerStart回调中初始化数据库连接，避免在Worker::runAll();运行前就初始化连接，在Worker::runAll();运行前初始化的连接属于主进程，子进程会继承这个连接，主进程和子进程共用相同的数据库连接会导致错误。示例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677use Workerman\\Worker;require_once __DIR__ . '/Workerman/Autoloader.php';require_once __DIR__ . '/vendor/autoload.php';$worker = new Worker('websocket://0.0.0.0:8484');$worker-&gt;onWorkerStart = function($worker)&#123; // 将db实例存储在全局变量中(也可以存储在某类的静态成员中) global $db; $db = new \\Workerman\\MySQL\\Connection('host', 'port', 'user', 'password', 'db_name');&#125;;$worker-&gt;onMessage = function($connection, $data)&#123; // 通过全局变量获得db实例 global $db; // 执行SQL $all_tables = $db-&gt;query('show tables'); $connection-&gt;send(json_encode($all_tables));&#125;;// 运行workerWorker::runAll();具体MySQL/Connection用法// 初始化db连接$db = new \\Workerman\\MySQL\\Connection('host', 'port', 'user', 'password', 'db_name');// 获取所有数据$db-&gt;select('ID,Sex')-&gt;from('Persons')-&gt;where('sex= :sex AND ID = :id')-&gt;bindValues(array('sex'=&gt;'M', 'id' =&gt; 1))-&gt;query();//等价于$db-&gt;select('ID,Sex')-&gt;from('Persons')-&gt;where(\"sex= 'M' AND ID = 1\")-&gt;query();//等价于$db-&gt;query(\"SELECT ID,Sex FROM `Persons` WHERE sex='M' AND ID = 1\");// 获取一行数据$db-&gt;select('ID,Sex')-&gt;from('Persons')-&gt;where('sex= :sex')-&gt;bindValues(array('sex'=&gt;'M'))-&gt;row();//等价于$db-&gt;select('ID,Sex')-&gt;from('Persons')-&gt;where(\"sex= 'M' \")-&gt;row();//等价于$db-&gt;row(\"SELECT ID,Sex FROM `Persons` WHERE sex='M'\");// 获取一列数据$db-&gt;select('ID')-&gt;from('Persons')-&gt;where('sex= :sex')-&gt;bindValues(array('sex'=&gt;'M'))-&gt;column();//等价于$db-&gt;select('ID')-&gt;from('Persons')-&gt;where(\"sex= 'F' \")-&gt;column();//等价于$db-&gt;column(\"SELECT `ID` FROM `Persons` WHERE sex='M'\");// 获取单个值$db-&gt;select('ID')-&gt;from('Persons')-&gt;where('sex= :sex')-&gt;bindValues(array('sex'=&gt;'M'))-&gt;single();//等价于$db-&gt;select('ID')-&gt;from('Persons')-&gt;where(\"sex= 'F' \")-&gt;single();//等价于$db-&gt;single(\"SELECT ID FROM `Persons` WHERE sex='M'\");// 复杂查询$db-&gt;select('*')-&gt;from('table1')-&gt;innerJoin('table2','table1.uid = table2.uid')-&gt;where('age &gt; :age')-&gt;groupBy(array('aid'))-&gt;having('foo=\"foo\"')-&gt;orderByASC/*orderByDESC*/(array('did'))-&gt;limit(10)-&gt;offset(20)-&gt;bindValues(array('age' =&gt; 13));// 等价于$db-&gt;query('SELECT * FROM `table1` INNER JOIN `table2` ON `table1`.`uid` = `table2`.`uid`WHERE age &gt; 13 GROUP BY aid HAVING foo=\"foo\" ORDER BY did LIMIT 10 OFFSET 20');// 插入$insert_id = $db-&gt;insert('Persons')-&gt;cols(array( 'Firstname'=&gt;'abc', 'Lastname'=&gt;'efg', 'Sex'=&gt;'M', 'Age'=&gt;13))-&gt;query();等价于$insert_id = $db-&gt;query(\"INSERT INTO `Persons` ( `Firstname`,`Lastname`,`Sex`,`Age`)VALUES ( 'abc', 'efg', 'M', 13)\");// 更新$row_count = $db-&gt;update('Persons')-&gt;cols(array('sex'))-&gt;where('ID=1')-&gt;bindValue('sex', 'F')-&gt;query();// 等价于$row_count = $db-&gt;update('Persons')-&gt;cols(array('sex'=&gt;'F'))-&gt;where('ID=1')-&gt;query();// 等价于$row_count = $db-&gt;query(\"UPDATE `Persons` SET `sex` = 'F' WHERE ID=1\");// 删除$row_count = $db-&gt;delete('Persons')-&gt;where('ID=9')-&gt;query();// 等价于$row_count = $db-&gt;query(\"DELETE FROM `Persons` WHERE ID=9\");// 事务$db-&gt;beginTrans();....$db-&gt;commitTrans(); // or $db-&gt;rollBackTrans(); More info: GO","categories":[{"name":"后端","slug":"后端","permalink":"http://140.143.243.43/categories/后端/"}],"tags":[{"name":"workerman","slug":"workerman","permalink":"http://140.143.243.43/tags/workerman/"}]},{"title":"Redis安装使用","slug":"Redis安装使用","date":"2019-02-16T17:25:52.000Z","updated":"2019-02-16T18:05:56.815Z","comments":true,"path":"2019/02/17/Redis安装使用/","link":"","permalink":"http://140.143.243.43/2019/02/17/Redis安装使用/","excerpt":"","text":"Linux 下安装下载地址：http://redis.io/download ,下载最新文档版本。本教程使用的最新文档版本为 4.0.1，下载并安装： 1234wget http://download.redis.io/releases/redis-4.0.1.tar.gztar xzf redis-4.0.1.tar.gzcd redis-4.0.1make make完后 redis-4.0.1目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：下面启动redis服务： 123456cd src./redis-server#注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。cd src./redis-server redis.conf#redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。 启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如： 123456cd src./redis-cliredis&gt; set foo barOKredis&gt; get foo\"bar\" More info: GO PHP 使用 RedisPHP安装redis扩展 1234567wget https://github.com/phpredis/phpredis/archive/2.2.4.tar.gzcd phpredis-2.2.7 # 进入 phpredis 目录/usr/local/php/bin/phpize # php安装后的路径./configure --with-php-config=/usr/local/php/bin/php-configmake &amp;&amp; make install#如果你是 PHP7 版本，则需要下载指定分支：git clone -b php7 https://github.com/phpredis/phpredis.git 修改php.ini文件 1234vi /usr/local/php/lib/php.ini#增加如下内容:extension_dir = \"/usr/local/php/lib/php/extensions/no-debug-zts-20090626\"（默认可以不加）extension=redis.so（必加） 安装完成后重启php-fpm 或 apache。查看phpinfo信息，就能看到redis扩展。 连接到 redis 服务 1234567891011&lt;?php //连接本地的 Redis 服务 $redis = new Redis(); $redis-&gt;connect('127.0.0.1', 6379); echo \"Connection to server sucessfully\"; //查看服务是否运行 echo \"Server is running: \" . $redis-&gt;ping();?&gt;#执行脚本，输出结果为：Connection to server sucessfullyServer is running: PONG Redis PHP String(字符串) 实例 12345678910111213&lt;?php //连接本地的 Redis 服务 $redis = new Redis(); $redis-&gt;connect('127.0.0.1', 6379); echo \"Connection to server sucessfully\"; //设置 redis 字符串数据 $redis-&gt;set(\"tutorial-name\", \"Redis tutorial\"); // 获取存储的数据并输出 echo \"Stored string in redis:: \" . $redis-&gt;get(\"tutorial-name\");?&gt;#执行脚本，输出结果为：Connection to server sucessfullyStored string in redis:: Redis tutorial Redis PHP List(列表) 实例 1234567891011121314151617181920&lt;?php //连接本地的 Redis 服务 $redis = new Redis(); $redis-&gt;connect('127.0.0.1', 6379); echo \"Connection to server sucessfully\"; //存储数据到列表中 $redis-&gt;lpush(\"tutorial-list\", \"Redis\"); $redis-&gt;lpush(\"tutorial-list\", \"Mongodb\"); $redis-&gt;lpush(\"tutorial-list\", \"Mysql\"); // 获取存储的数据并输出 $arList = $redis-&gt;lrange(\"tutorial-list\", 0 ,5); echo \"Stored string in redis\"; print_r($arList);?&gt;#执行脚本，输出结果为：Connection to server sucessfullyStored string in redisMysqlMongodbRedis Redis PHP Keys 实例 123456789101112131415&lt;?php //连接本地的 Redis 服务 $redis = new Redis(); $redis-&gt;connect('127.0.0.1', 6379); echo \"Connection to server sucessfully\"; // 获取数据并输出 $arList = $redis-&gt;keys(\"*\"); echo \"Stored keys in redis:: \"; print_r($arList);?&gt;#执行脚本，输出结果为：Connection to server sucessfullyStored string in redis::tutorial-nametutorial-list More info: GO","categories":[{"name":"后端","slug":"后端","permalink":"http://140.143.243.43/categories/后端/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://140.143.243.43/tags/redis/"}]},{"title":"Linux上iptables防火墙的配置","slug":"Linux上iptables防火墙的配置","date":"2019-02-16T16:49:15.000Z","updated":"2019-02-16T17:21:14.334Z","comments":true,"path":"2019/02/17/Linux上iptables防火墙的配置/","link":"","permalink":"http://140.143.243.43/2019/02/17/Linux上iptables防火墙的配置/","excerpt":"","text":"安装iptables防火墙如果没有安装iptables需要先安装，CentOS执行 1yum install iptables Debian/Ubuntu执行： 1apt-get install iptables 清除已有iptables规则123iptables -Fiptables -Xiptables -Z 开放指定的端口12345678910111213141516171819202122-A和-I参数分别为添加到规则末尾和规则最前面。#允许本地回环接口(即运行本机访问本机)iptables -A INPUT -i lo -j ACCEPT# 允许已建立的或相关连的通行iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT#允许所有本机向外的访问iptables -A OUTPUT -j ACCEPT# 允许访问22端口iptables -A INPUT -p tcp --dport 22 -j ACCEPT#允许访问80端口iptables -A INPUT -p tcp --dport 80 -j ACCEPT#允许访问443端口iptables -A INPUT -p tcp --dport 443 -j ACCEPT#允许FTP服务的21和20端口iptables -A INPUT -p tcp --dport 21 -j ACCEPTiptables -A INPUT -p tcp --dport 20 -j ACCEPT#如果有其他端口的话，规则也类似，稍微修改上述语句就行#允许pingiptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT#禁止其他未允许的规则访问iptables -A INPUT -j REJECT #（注意：如果22端口未加入允许规则，SSH链接会直接断开。）iptables -A FORWARD -j REJECT 屏蔽IP123456789#如果只是想屏蔽IP的话“3、开放指定的端口”可以直接跳过。#屏蔽单个IP的命令是iptables -I INPUT -s 123.45.6.7 -j DROP#封整个段即从123.0.0.1到123.255.255.254的命令iptables -I INPUT -s 123.0.0.0/8 -j DROP#封IP段即从123.45.0.1到123.45.255.254的命令iptables -I INPUT -s 124.45.0.0/16 -j DROP#封IP段即从123.45.6.1到123.45.6.254的命令是iptables -I INPUT -s 123.45.6.0/24 -j DROP 查看已添加的iptables规则1234iptables -L -n#v：显示详细信息，包括每条规则的匹配包数量和匹配字节数#x：在 v 的基础上，禁止自动单位换算（K、M） vps侦探#n：只显示IP地址和端口号，不将ip解析为域名 删除已添加的iptables规则1234#将所有iptables以序号标记显示，执行：iptables -L -n --line-numbers#比如要删除INPUT里序号为8的规则，执行：iptables -D INPUT 8 iptables的开机启动及规则保存CentOS上可能会存在安装好iptables后，iptables并不开机自启动，要加入开机启动，可以执行一下： 1chkconfig --level 345 iptables on 修改iptables配置 12345678910111213vi /etc/sysconfig/iptables#保存规则CentOS上可以执行service iptables save #另外更需要注意的是Debian/Ubuntu上iptables是不会保存规则的#需要按如下步骤进行，让网卡关闭是保存iptables规则，启动时加载iptables规则：#创建/etc/network/if-post-down.d/iptables 文件，添加如下内容：#!/bin/bashiptables-save &gt; /etc/iptables.rules#执行：chmod +x /etc/network/if-post-down.d/iptables 添加执行权限。#创建/etc/network/if-pre-up.d/iptables 文件，添加如下内容：#!/bin/bashiptables-restore &lt; /etc/iptables.rules#执行：chmod +x /etc/network/if-pre-up.d/iptables 添加执行权限。 CentOS切换为iptables防火墙切换到iptables首先应该关掉默认的firewalld，然后安装iptables服务。 关闭firewall： 12service firewalld stopsystemctl disable firewalld.service #禁止firewall开机启动 安装iptables防火墙服务 1yum install iptables-services #安装 编辑iptables防火墙配置 123vi /etc/sysconfig/iptables #编辑防火墙配置文件service iptables restart #开启 systemctl enable iptables.service #设置防火墙开机启动","categories":[{"name":"服务器","slug":"服务器","permalink":"http://140.143.243.43/categories/服务器/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://140.143.243.43/tags/linux/"}]},{"title":"Centos7部署LNMP+SSL服务器","slug":"Centos7部署LNMP-SSL服务器","date":"2019-02-16T15:32:46.000Z","updated":"2019-02-16T16:40:16.703Z","comments":true,"path":"2019/02/16/Centos7部署LNMP-SSL服务器/","link":"","permalink":"http://140.143.243.43/2019/02/16/Centos7部署LNMP-SSL服务器/","excerpt":"","text":"关闭防火墙12sed -i \"s/SELINUX=enforcing/SELINUX=disabled/\" /etc/selinux/configsetenforce 0 防火墙配置 1234firewall-cmd --permanent --add-port=80/tcpfirewall-cmd --permanent --add-service=httpfirewall-cmd --permanent --add-service=httpsfirewall-cmd --reload 安装nginx安装nginx rpm包 1rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 正式安装nginx 1yum install -y nginx 重启nginx 1systemctl restart nginx 设置开机自启动 1systemctl enable nginx 安装php7安装php-fpm的依赖 1yum install net-tools gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel git gcc wget -y 安装epel-release 1yum -y install epel-release 1rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 正式安装php7 1yum -y install php71w-fpm php71w-cli php71w-gd php71w-mcrypt php71w-mysql php71w-pear php71w-xml php71w-mbstring php71w-pdo php71w-json php71w-pecl-apcu php71w-pecl-apcu-devel 查看php版本 1php -v 配置nginx配置 1234567891011121314#修改nginx用户，在第 8 行和第 10行，user 和 group 赋值为 nginx。vim /etc/php-fpm.d/www.confuser = nginxgroup = nginx#在第 22 行，确保 php-fpm 运行在指定端口。listen = 127.0.0.1:9000#取消第 366-370 行的注释，启用 php-fpm 的系统环境变量。env[HOSTNAME] = $HOSTNAMEenv[PATH] = /usr/local/bin:/usr/bin:/binenv[TMP] = /tmpenv[TMPDIR] = /tmpenv[TEMP] = /tmp php配置 1234#新建php缓存文件夹mkdir -p /var/lib/php/session#设置文件夹及子目录文件所属用户组chown nginx:nginx -R /var/lib/php/session/ 重启php、nginx,并设置开机自启动 1234sudo systemctl start php-fpmsudo systemctl start nginxsudo systemctl enable php-fpmsudo systemctl enable nginx 安装mariadb安装mariadb 1yum -y install mariadb mariadb-server 启动并设置mariadb开机自启动 12systemctl start mariadbsystemctl enable mariadb 配置SSL创建SSL证书文件夹 1mkdir -p /etc/nginx/cert/ 根据私钥pri_key.pem生产一个新的证书请求文件并保存 1openssl req -new -x509 -days 365 -nodes -out /etc/nginx/cert/xxx.crt -keyout /etc/nginx/cert/xxx.key 配置证书目录权限 12chmod 700 /etc/nginx/certchmod 600 /etc/nginx/cert/* 配置网站目录所属用户组 12cd /usr/share/nginx/html/chown nginx:nginx -R xxx/ 配置虚拟主机 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091cd /etc/nginx/conf.d/vim xxx.confserver &#123; listen 80; server_name www.nbdeli.com; return 301 https://$server_name$request_uri;&#125;server &#123; listen 443; server_name www.nbdeli.com; ssl on; ssl_certificate /etc/nginx/cert/nbdeli.com.crt; ssl_certificate_key /etc/nginx/cert/nbdeli.com.key; add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; access_log /home/wwwlog/$server_name.access.log main; location = /robots.txt &#123; allow all; log_not_found off; access_log off; &#125; location = /.well-known/carddav &#123; return 301 $scheme://$host/remote.php/dav; &#125; location = /.well-known/caldav &#123; return 301 $scheme://$host/remote.php/dav; &#125; client_max_body_size 512M; fastcgi_buffers 64 4K; gzip off; error_page 403 /core/templates/403.php; error_page 404 /core/templates/404.php; location / &#123; root /home/wwwroot/$server_name; index index.html index.htm index.php default.php; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; location ~ \\.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /home/wwwroot/$server_name$fastcgi_script_name; include fastcgi_params; &#125; location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123; deny all; &#125; location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123; deny all; &#125; location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123; include fastcgi_params; fastcgi_split_path_info ^(.+\\.php)(/.*)$; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param HTTPS on; fastcgi_param modHeadersAvailable true; fastcgi_param front_controller_active true; fastcgi_intercept_errors on; fastcgi_request_buffering off; &#125; location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123; try_files $uri/ =404; index index.php; &#125; location ~* \\.(?:css|js)$ &#123; try_files $uri /index.php$uri$is_args$args; add_header Cache-Control \"public, max-age=7200\"; add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; access_log off; &#125; location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123; try_files $uri /index.php$uri$is_args$args; access_log off; &#125;&#125; 测试nginx 1nginx -t 配置完nginx,记得重启nginx 1systemctl restart nginx","categories":[{"name":"服务器","slug":"服务器","permalink":"http://140.143.243.43/categories/服务器/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://140.143.243.43/tags/linux/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-02-14T18:17:21.550Z","updated":"2019-02-14T18:17:21.550Z","comments":true,"path":"2019/02/15/hello-world/","link":"","permalink":"http://140.143.243.43/2019/02/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"myBlog","slug":"myBlog","date":"2019-02-14T14:24:10.000Z","updated":"2019-02-16T15:19:31.144Z","comments":true,"path":"2019/02/14/myBlog/","link":"","permalink":"http://140.143.243.43/2019/02/14/myBlog/","excerpt":"","text":"","categories":[],"tags":[{"name":"example","slug":"example","permalink":"http://140.143.243.43/tags/example/"}]}]}