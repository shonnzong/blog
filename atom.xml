<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShonnZong的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.yszldf.cn/"/>
  <updated>2019-12-26T10:00:04.753Z</updated>
  <id>https://www.yszldf.cn/</id>
  
  <author>
    <name>ShonnZong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel中队列的使用</title>
    <link href="https://www.yszldf.cn/2019/12/26/Laravel%E4%B8%AD%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.yszldf.cn/2019/12/26/Laravel中队列的使用/</id>
    <published>2019-12-26T08:25:52.000Z</published>
    <updated>2019-12-26T10:00:04.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="驱动设置"><a href="#驱动设置" class="headerlink" title="驱动设置"></a>驱动设置</h3><h4 id="驱动配置"><a href="#驱动配置" class="headerlink" title="驱动配置"></a>驱动配置</h4><p>首先修改 .env 文件中的 QUEUE_CONNECTION 值，修改队列驱动连接为 redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QUEUE_CONNECTION=redis</span><br></pre></td></tr></table></figure><p>若已通过 Composer 安装 predis/predis 扩展包，命令：composer require predis/predis，不需要做操作<br>若未安装，但使用 PECL 安装了 PhpRedis PHP 扩展，在 config/database.php 配置文件中配置 Redis 的连接，做如下修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'client'</span> =&gt; <span class="string">'phpredis'</span>,<span class="comment">#把predis修改为phpredis</span></span><br></pre></td></tr></table></figure><h4 id="迁移表设置"><a href="#迁移表设置" class="headerlink" title="迁移表设置"></a>迁移表设置</h4><p>创建队列处理失败的任务表 failed_jobs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php artisan queue:failed-table <span class="comment">#创建表的迁移文件</span></span><br><span class="line"></span><br><span class="line">php artisan migrate<span class="comment">#进行迁移</span></span><br></pre></td></tr></table></figure><p>另：若你选择了database 队列驱动，创建队列处理的任务表 jobs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php artisan queue:table<span class="comment">#创建表的迁移文件</span></span><br><span class="line"></span><br><span class="line">php artisan migrate<span class="comment">#进行迁移</span></span><br></pre></td></tr></table></figure><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><h4 id="生成任务类"><a href="#生成任务类" class="headerlink" title="生成任务类"></a>生成任务类</h4><p>队列的任务类都默认放在 app/Jobs 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:job ProcessPodcast</span><br></pre></td></tr></table></figure><h4 id="任务类结构"><a href="#任务类结构" class="headerlink" title="任务类结构"></a>任务类结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Jobs;</span><br><span class="line"></span><br><span class="line">use App\Podcast;</span><br><span class="line">use App\AudioProcessor;</span><br><span class="line">use Illuminate\Bus\Queueable;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Queue\InteractsWithQueue;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldQueue;</span><br><span class="line">use Illuminate\Foundation\Bus\Dispatchable;</span><br><span class="line"></span><br><span class="line">class ProcessPodcast implements ShouldQueue</span><br><span class="line">&#123;</span><br><span class="line">    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Eloquent模型实例.</span><br><span class="line">     * @var <span class="variable">$podcast</span></span><br><span class="line">     */</span><br><span class="line">    protected <span class="variable">$podcast</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建一个新的任务实例。</span><br><span class="line">     *</span><br><span class="line">     * @param  Podcast  <span class="variable">$podcast</span></span><br><span class="line">     * @<span class="built_in">return</span> void</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> __construct(Podcast <span class="variable">$podcast</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;podcast = <span class="variable">$podcast</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 运行任务。</span><br><span class="line">     *</span><br><span class="line">     * @param  AudioProcessor  <span class="variable">$processor</span></span><br><span class="line">     * @<span class="built_in">return</span> void</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> handle(AudioProcessor <span class="variable">$processor</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        // Process uploaded podcast...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行失败的任务。</span><br><span class="line">     *</span><br><span class="line">     * @param  Exception  <span class="variable">$exception</span></span><br><span class="line">     * @<span class="built_in">return</span> void</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> failed(Exception <span class="variable">$exception</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        // 给用户发送失败的通知等等...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分发任务"><a href="#分发任务" class="headerlink" title="分发任务"></a>分发任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:job ProcessPodcast</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use App\Jobs\ProcessPodcast;</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line">use App\Http\Controllers\Controller;</span><br><span class="line"></span><br><span class="line">class PodcastController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 存储一个新的播客节目。</span><br><span class="line">     *</span><br><span class="line">     * @param  Request  <span class="variable">$request</span></span><br><span class="line">     * @<span class="built_in">return</span> Response</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> store(Request <span class="variable">$request</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建播客...</span><br><span class="line"></span><br><span class="line">        // 即时分发</span><br><span class="line">        ProcessPodcast::dispatch(<span class="variable">$podcast</span>);</span><br><span class="line"></span><br><span class="line">        // 延迟分发</span><br><span class="line">        ProcessPodcast::dispatch(<span class="variable">$podcast</span>)-&gt;delay(now()-&gt;addMinutes(10));</span><br><span class="line"></span><br><span class="line">        // 工作链（相当于数据库的事务操作，一旦序列中的任务失败了，剩余的工作将不会执行）</span><br><span class="line">        ProcessPodcast::withChain([</span><br><span class="line">    new OptimizePodcast,</span><br><span class="line">    new ReleasePodcast</span><br><span class="line">])-&gt;dispatch();</span><br><span class="line"></span><br><span class="line">// 分发任务到指定队列</span><br><span class="line">ProcessPodcast::dispatch(<span class="variable">$podcast</span>)-&gt;onQueue(<span class="string">'processing'</span>);</span><br><span class="line"></span><br><span class="line">// 分发任务到指定连接</span><br><span class="line">ProcessPodcast::dispatch(<span class="variable">$podcast</span>)-&gt;onConnection(<span class="string">'sqs'</span>);</span><br><span class="line"></span><br><span class="line">// 助手函数分发</span><br><span class="line">dispatch((new ProcessPodcast())-&gt;onQueue(<span class="string">'high'</span>)-&gt;onConnection(<span class="string">'sqs'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行队列处理器"><a href="#运行队列处理器" class="headerlink" title="运行队列处理器"></a>运行队列处理器</h3><p>一旦 queue:work 命令开始执行，它会一直运行直到它被手动停止或终端被关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">php artisan queue:work --tries=3 --timeout=30 --sleep=3 --queue=queue1,queue2</span><br><span class="line"></span><br><span class="line"><span class="comment">#tries任务可以尝试的最大次数</span></span><br><span class="line"><span class="comment">#timeout任务可以执行的秒数 (超时时间)</span></span><br><span class="line"><span class="comment">#sleep队列进程睡眠时间</span></span><br><span class="line"><span class="comment">#queue1,queue2表示指定的队列queue1比queue2优先级别高</span></span><br><span class="line"></span><br><span class="line">php artisan queue:restart <span class="comment">#重启队列</span></span><br></pre></td></tr></table></figure><h3 id="Supervisor-配置"><a href="#Supervisor-配置" class="headerlink" title="Supervisor 配置"></a>Supervisor 配置</h3><h4 id="配置-Supervisor"><a href="#配置-Supervisor" class="headerlink" title="配置 Supervisor"></a>配置 Supervisor</h4><p>一般 Supervisor 的配置文件存储在 /etc/supervisor/conf.d 目录<br>创建一个 laravel-worker.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:laravel-worker]</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line"><span class="built_in">command</span>=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">user=forge</span><br><span class="line">numprocs=8</span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/home/forge/app.com/worker.log</span><br></pre></td></tr></table></figure><p>在这个示例中， numprocs 会告诉 Supervisor 运行 8 个 queue:work 进程并且管理它们，当它们关闭时会将其自动重启。当然，你应该将 command 选项中的 queue:work sqs 部分修改为你的队列连接</p><h4 id="Supervisor-操作"><a href="#Supervisor-操作" class="headerlink" title="Supervisor 操作"></a>Supervisor 操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl reread</span><br><span class="line"></span><br><span class="line">sudo supervisorctl update</span><br><span class="line"></span><br><span class="line">sudo supervisorctl start laravel-worker:*</span><br></pre></td></tr></table></figure><h3 id="任务事件"><a href="#任务事件" class="headerlink" title="任务事件"></a>任务事件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Providers;</span><br><span class="line"></span><br><span class="line">use Illuminate\Support\Facades\Queue;</span><br><span class="line">use Illuminate\Queue\Events\JobFailed;</span><br><span class="line">use Illuminate\Support\ServiceProvider;</span><br><span class="line"></span><br><span class="line">class AppServiceProvider extends ServiceProvider</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 启动任意服务。</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> void</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> boot()</span><br><span class="line">    &#123;</span><br><span class="line">    // 任务失败事件</span><br><span class="line">        Queue::failing(<span class="keyword">function</span> (JobFailed <span class="variable">$event</span>) &#123;</span><br><span class="line">            // <span class="variable">$event</span>-&gt;connectionName</span><br><span class="line">            // <span class="variable">$event</span>-&gt;job</span><br><span class="line">            // <span class="variable">$event</span>-&gt;exception</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">// 任务执行前事件（例如：额外的日志或增加统计）</span><br><span class="line">        Queue::before(<span class="keyword">function</span> (JobProcessing <span class="variable">$event</span>) &#123;</span><br><span class="line">            // <span class="variable">$event</span>-&gt;connectionName</span><br><span class="line">            // <span class="variable">$event</span>-&gt;job</span><br><span class="line">            // <span class="variable">$event</span>-&gt;job-&gt;payload()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 任务执行后事件（例如：额外的日志或增加统计）</span><br><span class="line">        Queue::after(<span class="keyword">function</span> (JobProcessed <span class="variable">$event</span>) &#123;</span><br><span class="line">            // <span class="variable">$event</span>-&gt;connectionName</span><br><span class="line">            // <span class="variable">$event</span>-&gt;job</span><br><span class="line">            // <span class="variable">$event</span>-&gt;job-&gt;payload()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 在队列 facade 使用 looping 方法可以在处理器尝试获取任务之前执行回调</span><br><span class="line">        Queue::looping(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册服务提供者。</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> void</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> register()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列其他-Artisan-命令"><a href="#队列其他-Artisan-命令" class="headerlink" title="队列其他 Artisan 命令"></a>队列其他 Artisan 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看所有被放入 failed_jobs 数据表中的任务</span></span><br><span class="line">php artisan queue:failed</span><br><span class="line"></span><br><span class="line"><span class="comment">#重试一个任务 ID 为 5 的任务</span></span><br><span class="line">php artisan queue:retry 5</span><br><span class="line"></span><br><span class="line"><span class="comment">#重试所有失败的任务</span></span><br><span class="line">php artisan queue:retry all</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一个失败的任务</span></span><br><span class="line">php artisan queue:forget 5</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空所有失败的任务</span></span><br><span class="line">php artisan queue:flush</span><br></pre></td></tr></table></figure><p>More info: <a href="https://learnku.com/docs/laravel/5.7/queues/2286" target="_blank" rel="noopener">GO</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;驱动设置&quot;&gt;&lt;a href=&quot;#驱动设置&quot; class=&quot;headerlink&quot; title=&quot;驱动设置&quot;&gt;&lt;/a&gt;驱动设置&lt;/h3&gt;&lt;h4 id=&quot;驱动配置&quot;&gt;&lt;a href=&quot;#驱动配置&quot; class=&quot;headerlink&quot; title=&quot;驱动配置&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="laravel" scheme="https://www.yszldf.cn/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>PHP秒杀设计</title>
    <link href="https://www.yszldf.cn/2019/08/21/Php%E7%A7%92%E6%9D%80%E8%AE%BE%E8%AE%A1/"/>
    <id>https://www.yszldf.cn/2019/08/21/Php秒杀设计/</id>
    <published>2019-08-21T09:23:21.000Z</published>
    <updated>2019-08-22T06:42:03.500Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">减而治之：</span><br><span class="line">CDN原理</span><br><span class="line">nginx限流</span><br><span class="line">异步队列</span><br><span class="line">分而治之：</span><br><span class="line">nginx负载均衡</span><br></pre></td></tr></table></figure><h3 id="特征与难点分析"><a href="#特征与难点分析" class="headerlink" title="特征与难点分析"></a>特征与难点分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">特征：</span><br><span class="line">写强一致性</span><br><span class="line">读弱一致性</span><br><span class="line">难点：</span><br><span class="line">极致性能的实现</span><br><span class="line">高可用的保证</span><br></pre></td></tr></table></figure><h3 id="压测工具的安装"><a href="#压测工具的安装" class="headerlink" title="压测工具的安装"></a>压测工具的安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br><span class="line">ab -V</span><br><span class="line">ab -n100 -c10 http://xxx<span class="comment">#-n表示总测试次数，-c表示测试并发数</span></span><br><span class="line"></span><br><span class="line">Requests per second: 101.15[<span class="comment">#/sec](mean)</span></span><br></pre></td></tr></table></figure><h3 id="nginx限流配置"><a href="#nginx限流配置" class="headerlink" title="nginx限流配置"></a>nginx限流配置</h3><ul><li>按连接数限速，即并发数（ngx_http_limit_conn_module）</li><li>按请求速率限速，按照ip限制单位时间内的请求数（ngx_http_limit_req_module）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">limit_req_zone <span class="variable">$binary_remote_addr</span> zone=mylimit:10m rate=1r/s;</span><br><span class="line"></span><br><span class="line"><span class="comment">#再在对应的location里面使用这个规则</span></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">limit_req_zone=mylimit burst=1 nodelay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大型网站架构"><a href="#大型网站架构" class="headerlink" title="大型网站架构"></a>大型网站架构</h3><p><img src="/images/website.png" alt="website"></p><p>集群：高可用、高并发</p><ul><li>lvs层：基于4层负载均衡的机器，流量从路由器过来后，把TCP的头部做修改，然后把包转发给接入层</li><li>接入层：7层负载均衡器，解析包里面的内容，根据解析的域名不同跳转到server层</li><li>server层：</li></ul><p>各层之间互相检测心跳，当服务器出现宕机后，通过浮动更改服务器的ip地址，完成故障切换</p><h3 id="nginx负载均衡算法"><a href="#nginx负载均衡算法" class="headerlink" title="nginx负载均衡算法"></a>nginx负载均衡算法</h3><ul><li>Round-robin(轮询)</li><li>Weight-round-robin(带权轮询)</li><li>Ip-hash(Ip哈希)</li></ul><p>带权轮询模式：按照设置的比例轮询服务器执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream <span class="built_in">test</span> &#123;</span><br><span class="line">   server 192.168.0.1 weight=1;</span><br><span class="line">   server 192.168.0.2 weight=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://www.imooc.com/video/19877" target="_blank" rel="noopener">GO</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理介绍&quot;&gt;&lt;a href=&quot;#原理介绍&quot; class=&quot;headerlink&quot; title=&quot;原理介绍&quot;&gt;&lt;/a&gt;原理介绍&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="php" scheme="https://www.yszldf.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5常用命令</title>
    <link href="https://www.yszldf.cn/2019/07/20/ThinkPHP5%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.yszldf.cn/2019/07/20/ThinkPHP5常用命令/</id>
    <published>2019-07-20T09:57:14.000Z</published>
    <updated>2019-07-20T10:03:34.321Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模块自动生成指令："><a href="#模块自动生成指令：" class="headerlink" title="模块自动生成指令："></a>模块自动生成指令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">默认会读取应用目录application下面的build.php作为自动</span><br><span class="line"> </span><br><span class="line">生成的定义文件，如果你的定义文件位置不同，则需要使用</span><br><span class="line"> </span><br><span class="line">--config 参数指定如下：</span><br><span class="line"> </span><br><span class="line">php think build (--config build.php)</span><br></pre></td></tr></table></figure><h3 id="快速生成类库文件"><a href="#快速生成类库文件" class="headerlink" title="快速生成类库文件:"></a>快速生成类库文件:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1) 快速生成控制器类</span><br><span class="line"> </span><br><span class="line">执行下面的指令可以生成 index模块的 Blog控制器类库文件</span><br><span class="line"> </span><br><span class="line">php think make:controller index/Blog</span><br><span class="line"> </span><br><span class="line">2) 快速生成模型类</span><br><span class="line"> </span><br><span class="line">执行下面的指令可以生成 index 模块的 Blog 模型类库文件</span><br><span class="line"> </span><br><span class="line">php think make:model index/Blog</span><br></pre></td></tr></table></figure><h3 id="快速生成类库映射文件"><a href="#快速生成类库映射文件" class="headerlink" title="快速生成类库映射文件:"></a>快速生成类库映射文件:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以使用下面的指令生成类库映射文件，提高系统自动加载的性能。</span><br><span class="line"> </span><br><span class="line">php think optimize:<span class="built_in">autoload</span></span><br><span class="line"> </span><br><span class="line">指令执行成功后，会在rumtime目录下面生成classmap.php文件，生成的类库映射文件会扫描系统目录和 应用目录的类库</span><br></pre></td></tr></table></figure><h3 id="生成路由缓存"><a href="#生成路由缓存" class="headerlink" title="生成路由缓存:"></a>生成路由缓存:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">optimize:route如果你的应用定义了比较多的路由规则，可以使用下面的指令生成路由缓存文件，提高系统的路由检测的性 能。</span><br><span class="line"> </span><br><span class="line">php think optimize:route</span><br><span class="line"> </span><br><span class="line">指令执行成功后，会在rumtime目录下面生成route.php 文件，生成的路由缓存文件仅仅支持在应用的路由配置文件中定义的路由（包括方法定</span><br><span class="line"> </span><br><span class="line">义和配置定义）</span><br></pre></td></tr></table></figure><h3 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件:"></a>清除缓存文件:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1) 如果需要清除应用的缓存文件，可以使用下面的命令：</span><br><span class="line"> </span><br><span class="line">php think clear</span><br><span class="line"> </span><br><span class="line">不带任何参数调用clear命令的话，会清除 runtime 目录（包括模板缓存、日志文件及其子目录）下面的所 有的文件，但会保留目录。</span><br><span class="line"> </span><br><span class="line">2)如果需要清除某个指定目录下面的文件，可以使用：</span><br><span class="line"> </span><br><span class="line">php think clear --path d:\www\tp5\runtime\<span class="built_in">log</span>\</span><br></pre></td></tr></table></figure><h3 id="生成配置缓存文件"><a href="#生成配置缓存文件" class="headerlink" title="生成配置缓存文件:"></a>生成配置缓存文件:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1)可以为应用或者模块生成配置缓存文件</span><br><span class="line"> </span><br><span class="line">php think optimize:config</span><br><span class="line"> </span><br><span class="line">默认生成应用的配置缓存文件，调用后会在runtime目录下面生成init.php文件，生成配置缓存文件 后，应用目录下面的config.php common.php以及tags.php不会被加载，被 runtime/init.php 取代。</span><br><span class="line"> </span><br><span class="line">2)如果需要生成某个模块的配置缓存，可以使用：</span><br><span class="line"> </span><br><span class="line">php think optimize:config --module index</span><br><span class="line"> </span><br><span class="line">调用后会在runtime/index目录下面生成init.php文件，生成后，index模块目录下面的 config.php common.php以及tags.php不会被加载，被runtime/index/init.php取代</span><br></pre></td></tr></table></figure><h3 id="生成数据表字段缓存"><a href="#生成数据表字段缓存" class="headerlink" title="生成数据表字段缓存:"></a>生成数据表字段缓存:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1)可以通过生成数据表字段信息缓存，提升数据库查询的性能，避免多余的查询。命令如下：</span><br><span class="line"> </span><br><span class="line">php think optimize:schema</span><br><span class="line"> </span><br><span class="line">会自动生成当前数据库配置文件中定义的数据表字段缓存，也可以指定数据库生成字段缓存（必须有用户权限），例如，下面指定生成demo数据库下面的所有数据表的字段缓存信息</span><br><span class="line"> </span><br><span class="line">php think optimize:schema --db demo</span><br><span class="line"> </span><br><span class="line">执行后会自动在<span class="string">'runtime/schema'</span>目录下面按照数据表生成字段缓存文</span><br><span class="line"> </span><br><span class="line">件。</span><br><span class="line"> </span><br><span class="line">如果你的应用使用了不同的数据库连接，可以根据模块来生成，如下：</span><br><span class="line"> </span><br><span class="line">php think optimize:schema --module index</span><br><span class="line"> </span><br><span class="line">会读取index模块的模型来生成数据表字段缓存。</span><br><span class="line"> </span><br><span class="line">更新数据表字段缓存也是同样的方式，每次执行都会重新生成缓存。如果需要单独更新某个数据表的缓存， 可以使用：</span><br><span class="line"> </span><br><span class="line">php think optimize:schema --table think_user</span><br><span class="line"> </span><br><span class="line">支持指定数据库名称</span><br><span class="line"> </span><br><span class="line">php think optimize:schema --table demo.think_user</span><br></pre></td></tr></table></figure><h3 id="更新Thinkphp5的版本输入指令："><a href="#更新Thinkphp5的版本输入指令：" class="headerlink" title="更新Thinkphp5的版本输入指令："></a>更新Thinkphp5的版本输入指令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在项目根目录下输入 ：composer update --prefer-dist</span><br><span class="line"> </span><br><span class="line">若TP5出现大版本更新则需要手动更改 项目根目录下的composer.json（第20行）手动修改对应的最新版本号。</span><br><span class="line"> </span><br><span class="line">指令 描述</span><br><span class="line"> </span><br><span class="line">build 自动生成目录和文件</span><br><span class="line"> </span><br><span class="line"><span class="built_in">help</span> 帮助</span><br><span class="line"> </span><br><span class="line">list 指令列表</span><br><span class="line"> </span><br><span class="line">clear 清除缓存指令</span><br><span class="line"> </span><br><span class="line">make:controller 创建控制器文件</span><br><span class="line"> </span><br><span class="line">make:model 创建模型文件</span><br><span class="line"> </span><br><span class="line">optimize:<span class="built_in">autoload</span> 生成类库映射文件</span><br><span class="line"> </span><br><span class="line">optimize:config 生成配置缓存文件</span><br><span class="line"> </span><br><span class="line">optimize:route 生成路由缓存文件</span><br><span class="line"> </span><br><span class="line">optimize:schema 生成数据表字段缓存文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模块自动生成指令：&quot;&gt;&lt;a href=&quot;#模块自动生成指令：&quot; class=&quot;headerlink&quot; title=&quot;模块自动生成指令：&quot;&gt;&lt;/a&gt;模块自动生成指令：&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="thinkphp" scheme="https://www.yszldf.cn/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>LNMP开启PHP加速扩展OPcache</title>
    <link href="https://www.yszldf.cn/2019/07/20/LNMP%E5%BC%80%E5%90%AFPHP%E5%8A%A0%E9%80%9F%E6%89%A9%E5%B1%95OPcache/"/>
    <id>https://www.yszldf.cn/2019/07/20/LNMP开启PHP加速扩展OPcache/</id>
    <published>2019-07-20T09:45:33.000Z</published>
    <updated>2019-07-20T09:56:08.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lnmp集成环境下"><a href="#lnmp集成环境下" class="headerlink" title="lnmp集成环境下"></a>lnmp集成环境下</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>进入lnmp解压后的目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./addons.sh install opcache</span><br></pre></td></tr></table></figure><p>Opcache和eAccelerator是冲突的，脚本会卸载eAccelerator后再安装Opcache，回车确认后就会自动安装opcache。</p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./addons.sh uninstall opcache</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>安装好扩展后编辑php.ini文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br></pre></td></tr></table></figure><p>在最下面的扩展那一块加上如下模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line"></span><br><span class="line">zend_extension=opcache.so</span><br><span class="line"></span><br><span class="line">[opcache]</span><br><span class="line">;开启opcache</span><br><span class="line">opcache.enable=1  </span><br><span class="line"></span><br><span class="line">;CLI环境下，PHP启用OPcache</span><br><span class="line">opcache.enable_cli=1</span><br><span class="line"></span><br><span class="line">;OPcache共享内存存储大小,单位MB</span><br><span class="line">opcache.memory_consumption=128  </span><br><span class="line"></span><br><span class="line">;PHP使用了一种叫做字符串驻留（string interning）的技术来改善性能。例如，如果你在代码中使用了1000次字符串“foobar”，在PHP内部只会在第一使用这个字符串的时候分配一个不可变的内存区域来存储这个字符串，其他的999次使用都会直接指向这个内存区域。这个选项则会把这个特性提升一个层次——默认情况下这个不可变的内存区域只会存在于单个php-fpm的进程中，如果设置了这个选项，那么它将会在所有的php-fpm进程中共享。在比较大的应用中，这可以非常有效地节约内存，提高应用的性能。</span><br><span class="line">这个选项的值是以兆字节（megabytes）作为单位，如果把它设置为16，则表示16MB，默认是4MB</span><br><span class="line">opcache.interned_strings_buffer=8</span><br><span class="line"></span><br><span class="line">;这个选项用于控制内存中最多可以缓存多少个PHP文件。这个选项必须得设置得足够大，大于你的项目中的所有PHP文件的总和。</span><br><span class="line">设置值取值范围最小值是 200，最大值在 PHP 5.5.6 之前是 100000，PHP 5.5.6 及之后是 1000000。也就是说在200到1000000之间。</span><br><span class="line">opcache.max_accelerated_files=4000</span><br><span class="line"></span><br><span class="line">;设置缓存的过期时间（单位是秒）,为0的话每次都要检查</span><br><span class="line">opcache.revalidate_freq=60</span><br><span class="line"></span><br><span class="line">;从字面上理解就是“允许更快速关闭”。它的作用是在单个请求结束时提供一种更快速的机制来调用代码中的析构器，从而加快PHP的响应速度和PHP进程资源的回收速度，这样应用程序可以更快速地响应下一个请求。把它设置为1就可以使用这个机制了。</span><br><span class="line">opcache.fast_shutdown=1</span><br><span class="line"></span><br><span class="line">;如果启用（设置为1），OPcache会在opcache.revalidate_freq设置的秒数去检测文件的时间戳（timestamp）检查脚本是否更新。</span><br><span class="line">如果这个选项被禁用（设置为0），opcache.revalidate_freq会被忽略，PHP文件永远不会被检查。这意味着如果你修改了你的代码，然后你把它更新到服务器上，再在浏览器上请求更新的代码对应的功能，你会看不到更新的效果</span><br><span class="line">强烈建议你在生产环境中设置为0，更新代码后，再平滑重启PHP和web服务器。</span><br><span class="line">opcache.validate_timestamps=0 </span><br><span class="line"></span><br><span class="line">;开启Opcache File Cache(实验性), 通过开启这个, 我们可以让Opcache把opcode缓存缓存到外部文件中, 对于一些脚本, 会有很明显的性能提升.</span><br><span class="line">这样PHP就会在/tmp目录下Cache一些Opcode的二进制导出文件, 可以跨PHP生命周期存在.</span><br><span class="line">opcache.file_cache=/tmp</span><br></pre></td></tr></table></figure><p>然后重启PHP就可以了，service php-fpm restart</p><p>More info: <a href="https://www.cnblogs.com/lamp01/p/8985068.html" target="_blank" rel="noopener">GO</a><br>More info: <a href="https://www.cmsky.com/lnmp-opcache/" target="_blank" rel="noopener">GO</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;lnmp集成环境下&quot;&gt;&lt;a href=&quot;#lnmp集成环境下&quot; class=&quot;headerlink&quot; title=&quot;lnmp集成环境下&quot;&gt;&lt;/a&gt;lnmp集成环境下&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="服务器" scheme="https://www.yszldf.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="https://www.yszldf.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看服务器当前系统的ip连接数以及状态</title>
    <link href="https://www.yszldf.cn/2019/07/20/Linux%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E7%9A%84ip%E8%BF%9E%E6%8E%A5%E6%95%B0%E4%BB%A5%E5%8F%8A%E7%8A%B6%E6%80%81/"/>
    <id>https://www.yszldf.cn/2019/07/20/Linux查看服务器当前系统的ip连接数以及状态/</id>
    <published>2019-07-20T09:25:54.000Z</published>
    <updated>2019-07-20T09:28:02.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看linux当前系统连接ip数"><a href="#查看linux当前系统连接ip数" class="headerlink" title="查看linux当前系统连接ip数"></a>查看linux当前系统连接ip数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | awk <span class="string">'/^tcp/ &#123;n=split($(NF-1),array,":");if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf("%-20s %s\n",a, S[a]);++I&#125;printf("%-20s %s\n","TOTAL_IP",I);for(a in s) printf("%-20s %s\n",a, s[a]);printf("%-20s %s\n","TOTAL_LINK",N);&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="查看NGINX的HTTP并发连接数以及状态"><a href="#查看NGINX的HTTP并发连接数以及状态" class="headerlink" title="查看NGINX的HTTP并发连接数以及状态"></a>查看NGINX的HTTP并发连接数以及状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">netstat -n|awk <span class="string">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br><span class="line"></span><br><span class="line">LAST_ACK 184</span><br><span class="line">SYN_RECV 159</span><br><span class="line">ESTABLISHED 11410</span><br><span class="line">FIN_WAIT1 61</span><br><span class="line">FIN_WAIT2 702</span><br><span class="line">CLOSING 1</span><br><span class="line">TIME_WAIT 478</span><br></pre></td></tr></table></figure><p>针对以上参数说明，TCP状态描述：<br>CLOSED：无连接是活动的或正在进行<br>LISTEN：服务器在等待进入呼叫<br>SYN_RECV：一个连接请求已经到达，等待确认<br>SYN_SENT：应用已经开始，打开一个连接<br>ESTABLISHED：正常数据传输状态<br>FIN_WAIT1：应用说它已经完成<br>FIN_WAIT2：另一边已同意释放<br>ITMED_WAIT：等待所有分组死掉<br>CLOSING：两边同时尝试关闭<br>TIME_WAIT：另一边已初始化一个释放<br>LAST_ACK：等待所有分组死掉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看linux当前系统连接ip数&quot;&gt;&lt;a href=&quot;#查看linux当前系统连接ip数&quot; class=&quot;headerlink&quot; title=&quot;查看linux当前系统连接ip数&quot;&gt;&lt;/a&gt;查看linux当前系统连接ip数&lt;/h3&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="服务器" scheme="https://www.yszldf.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="https://www.yszldf.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>LNMP下使用Jemalloc来优化MySQL、Nginx内存管理</title>
    <link href="https://www.yszldf.cn/2019/07/20/LNMP%E4%B8%8B%E4%BD%BF%E7%94%A8Jemalloc%E6%9D%A5%E4%BC%98%E5%8C%96MySQL%E3%80%81Nginx%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://www.yszldf.cn/2019/07/20/LNMP下使用Jemalloc来优化MySQL、Nginx内存管理/</id>
    <published>2019-07-20T09:13:58.000Z</published>
    <updated>2019-07-20T09:22:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>LNMP一键安装包里面已经集成了Jemalloc，在首次安装LNMP的时候就会提示是否安装和使用内存优化管理程序的。</p><p>(没有这个玩意，脚本里没找到，还是重新安装吧)如果安装LNMP时没有安装Jemalloc的话，可以使用LNMP的扩展安装脚本来安装，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./addons.sh jemalloc</span><br></pre></td></tr></table></figure><h4 id="Redis默认就是使用Jemalloc的"><a href="#Redis默认就是使用Jemalloc的" class="headerlink" title="Redis默认就是使用Jemalloc的"></a>Redis默认就是使用Jemalloc的</h4><p>如果安装Redis的时候，LNMP环境没有集成Jemalloc的话，可以在安装完Jemalloc后重新安装、编译一下Redis即可自动重新编译加入Jemalloc的支持了，如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./addons.sh redis</span><br></pre></td></tr></table></figure><h4 id="使用Jemalloc优化MySQL"><a href="#使用Jemalloc优化MySQL" class="headerlink" title="使用Jemalloc优化MySQL"></a>使用Jemalloc优化MySQL</h4><p>通过命令行修改mysqld_safe来让当前的MySQL来支持Jemalloc，如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s@executing mysqld_safe@executing mysqld_safe\nexport LD_PRELOAD=/usr/local/lib/libjemalloc.so@'</span> /usr/<span class="built_in">local</span>/mysql/bin/mysqld_safe</span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h4 id="使用Jemalloc优化Nginx"><a href="#使用Jemalloc优化Nginx" class="headerlink" title="使用Jemalloc优化Nginx"></a>使用Jemalloc优化Nginx</h4><p>LNMP下安装Jemalloc后，只需要重新编译一下Nginx即可，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> lnmp1.4</span><br><span class="line">./upgrade.sh nginx</span><br></pre></td></tr></table></figure><h4 id="最后验证Jemalloc是否已经生效并工作"><a href="#最后验证Jemalloc是否已经生效并工作" class="headerlink" title="最后验证Jemalloc是否已经生效并工作"></a>最后验证Jemalloc是否已经生效并工作</h4><p>用如下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -n | grep jemalloc</span><br></pre></td></tr></table></figure><p>结果如下（类似即表明Jemalloc已经生效了）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nginx      5398          root  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">nginx      5401       newblog  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">mysqld     6199         mysql  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">mysqld     6199  6200   mysql  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">mysqld     6199  6245   mysql  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">mysqld     6199  6254   mysql  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">mysqld     6199  6584   mysql  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">mysqld     6199  6762   mysql  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">mysqld     6199  6773   mysql  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br><span class="line">mysqld     6199  6774   mysql  mem  REG 8,1   2796824     152140 /usr/<span class="built_in">local</span>/lib/libjemalloc.so.2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;LNMP一键安装包里面已经集成了Jemalloc，在首次安装LNMP的时候就会提示是否安装和使用内存优化管理程序的。&lt;/p&gt;
&lt;p&gt;(没有这
      
    
    </summary>
    
      <category term="服务器" scheme="https://www.yszldf.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="https://www.yszldf.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Git忽略.idea/workspace.xml文件</title>
    <link href="https://www.yszldf.cn/2019/07/20/Git%E5%BF%BD%E7%95%A5-idea-workspace-xml%E6%96%87%E4%BB%B6/"/>
    <id>https://www.yszldf.cn/2019/07/20/Git忽略-idea-workspace-xml文件/</id>
    <published>2019-07-20T09:06:33.000Z</published>
    <updated>2019-07-20T09:10:50.043Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git忽略的原理： git设置本地忽略必须保证git的远程仓库分支上没有这个要忽略的文件，如果远程分支上存在这个文件，本地在设置ignore将不起作用。</span><br><span class="line">=========================================</span><br><span class="line">所以一般是在.gitignore 文件里面加入  .idea/ workspace.xml 即可，但是如果你在这样做之前已经将此文件提交到了git远程仓库，那就需要执行以下命令了：</span><br><span class="line"></span><br><span class="line">git  rm -r --cached .idea</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="git" scheme="https://www.yszldf.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Php解决vue跨域问题</title>
    <link href="https://www.yszldf.cn/2019/07/20/Php%E8%A7%A3%E5%86%B3vue%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://www.yszldf.cn/2019/07/20/Php解决vue跨域问题/</id>
    <published>2019-07-20T08:58:40.000Z</published>
    <updated>2019-07-20T09:03:32.525Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//// 准许跨域请求。</span><br><span class="line"><span class="variable">$allow_origin</span> = [</span><br><span class="line">    <span class="string">'https://supplier.llyx.ink'</span>,</span><br><span class="line">    <span class="string">'https://dev-supplier.llyx.ink'</span>,</span><br><span class="line">];</span><br><span class="line">//跨域访问的时候才会存在此字段（多域名判断）</span><br><span class="line"><span class="variable">$origin</span> = isset(<span class="variable">$_SERVER</span>[<span class="string">'HTTP_ORIGIN'</span>]) ? <span class="variable">$_SERVER</span>[<span class="string">'HTTP_ORIGIN'</span>] : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$origin</span>, <span class="variable">$allow_origin</span>)) &#123;</span><br><span class="line">    header(<span class="string">"Access-Control-Allow-Origin: "</span> . <span class="variable">$origin</span>);</span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">"Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE"</span>);</span><br><span class="line">/**</span><br><span class="line"> * 浏览器第一次在处理复杂请求的时候会先发起OPTIONS请求。路由在处理请求的时候会导致PUT请求失败。</span><br><span class="line"> * 在检测到option请求的时候就停止继续执行</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>] == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">    header(<span class="string">"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Authorization"</span>);</span><br><span class="line">    <span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="php" scheme="https://www.yszldf.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Windows设置控制台编码格式为UTF-8</title>
    <link href="https://www.yszldf.cn/2019/07/20/Windows%E8%AE%BE%E7%BD%AE%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E4%B8%BAUTF-8/"/>
    <id>https://www.yszldf.cn/2019/07/20/Windows设置控制台编码格式为UTF-8/</id>
    <published>2019-07-20T08:53:00.000Z</published>
    <updated>2019-07-20T08:57:26.114Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、运行CMD</span><br><span class="line"></span><br><span class="line">2、输入CHCP查看当前编码格式</span><br><span class="line"></span><br><span class="line">3、输入 CHCP 65001设置编码方式为UTF-8</span><br><span class="line"></span><br><span class="line">4、右击控制台，选择属性，换个字体，保存。字体之后可以换回来。这样才能在打开新的页面的时候依然是UTF-8编码格式</span><br><span class="line"></span><br><span class="line">注：CHCP是一个计算机指令，能够显示或设置活动代码页编号。</span><br><span class="line">代码页  描述</span><br><span class="line">65001   UTF-8代码页</span><br><span class="line">950 繁体中文</span><br><span class="line">936 简体中文默认的GBK</span><br><span class="line">437 MS-DOS 美国英语</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="服务器" scheme="https://www.yszldf.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="windows" scheme="https://www.yszldf.cn/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础操作</title>
    <link href="https://www.yszldf.cn/2019/07/20/MySQL%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.yszldf.cn/2019/07/20/MySQL基础操作/</id>
    <published>2019-07-20T08:40:57.000Z</published>
    <updated>2019-07-20T08:51:36.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">use mysql;</span><br><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令:CREATE USER <span class="string">'username'</span>@<span class="string">'host'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line">PS：username - 你将创建的用户名</span><br><span class="line">host - 指定该用户在哪个主机上可以登陆，此处的<span class="string">"localhost"</span>，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将<span class="string">"localhost"</span>改为<span class="string">"%"</span>，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;</span><br><span class="line">password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器。</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令: GRANT privileges ON databasename.tablename TO <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br><span class="line">PS: privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;databasename - 数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*.</span><br><span class="line">例子: GRANT SELECT, INSERT ON mq.* TO <span class="string">'dog'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><h3 id="创建用户同时授权"><a href="#创建用户同时授权" class="headerlink" title="创建用户同时授权"></a>创建用户同时授权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on mq.* to <span class="built_in">test</span>@localhost identified by <span class="string">'1234'</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">PS:必须执行flush privileges;</span><br></pre></td></tr></table></figure><h3 id="设置与更改用户密码"><a href="#设置与更改用户密码" class="headerlink" title="设置与更改用户密码"></a>设置与更改用户密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令:SET PASSWORD FOR <span class="string">'username'</span>@<span class="string">'host'</span> = PASSWORD(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure><h3 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令: REVOKE privilege ON databasename.tablename FROM <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令: DROP USER <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mysql" scheme="https://www.yszldf.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins安装与使用</title>
    <link href="https://www.yszldf.cn/2019/07/19/Jenkins%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.yszldf.cn/2019/07/19/Jenkins安装与使用/</id>
    <published>2019-07-19T08:22:11.000Z</published>
    <updated>2019-07-20T08:30:39.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu-下安装"><a href="#Ubuntu-下安装" class="headerlink" title="Ubuntu 下安装"></a>Ubuntu 下安装</h3><h4 id="安装Java-SDK"><a href="#安装Java-SDK" class="headerlink" title="安装Java SDK"></a>安装Java SDK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-11-jdk</span><br></pre></td></tr></table></figure><h4 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h4><p>首先，我们将存储库密钥添加到系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>添加密钥后，系统将返回OK. 接下来，我们将Debian包存储库地址附加到服务器的sources.list ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list</span><br></pre></td></tr></table></figure><p>当这两个都到位时，我们将运行update ，以便apt-get将使用新的存储库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>最后，我们将安装Jenkins及其依赖项，包括Java:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure><p>以上安装不成功的朋友，是由于Jenkins官网的校验码出现了问题。<br>指定早期版本可以安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install jenkins=2.138.1</span><br></pre></td></tr></table></figure><p>现在Jenkins及其依赖项已经到位，我们将启动Jenkins服务器</p><h4 id="开始Jenkins"><a href="#开始Jenkins" class="headerlink" title="开始Jenkins"></a>开始Jenkins</h4><p>使用systemctl我们将启动Jenkins：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start jenkins</span><br></pre></td></tr></table></figure><p>由于systemctl不显示输出，我们将使用其status命令来验证它是否成功启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status jenkins</span><br></pre></td></tr></table></figure><p>如果一切顺利，输出的开始应显示服务处于活动状态，并配置为启动时启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">● jenkins.service - LSB: Start Jenkins at boot time</span><br><span class="line">  Loaded: loaded (/etc/init.d/jenkins; bad; vendor preset: enabled)</span><br><span class="line">  Active:active (exited) since Thu 2017-04-20 16:51:13 UTC; 2min 7s ago</span><br><span class="line">    Docs: man:systemd-sysv-generator(8)</span><br></pre></td></tr></table></figure><p>现在Jenkins正在运行，我们将调整防火墙规则，以便我们可以从网络浏览器到达Jenkins以完成初始设置</p><h4 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h4><p>默认情况下，Jenkins在端口8080上运行,有时候由于端口占用需要修改如下：<br>修改 /etc/default/jenkins 文件，将端口 8080 改成 8082</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP_PORT=8082</span><br></pre></td></tr></table></figure><p>重启Jenkins:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart jenkins</span><br></pre></td></tr></table></figure><h4 id="设置Jenkins"><a href="#设置Jenkins" class="headerlink" title="设置Jenkins"></a>设置Jenkins</h4><p>使用cat命令显示密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ubuntu-下安装&quot;&gt;&lt;a href=&quot;#Ubuntu-下安装&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 下安装&quot;&gt;&lt;/a&gt;Ubuntu 下安装&lt;/h3&gt;&lt;h4 id=&quot;安装Java-SDK&quot;&gt;&lt;a href=&quot;#安装Java-SDK&quot;
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="jenkins" scheme="https://www.yszldf.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>SeasLog安装与使用</title>
    <link href="https://www.yszldf.cn/2019/07/19/SeasLog%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.yszldf.cn/2019/07/19/SeasLog安装与使用/</id>
    <published>2019-07-19T07:53:54.000Z</published>
    <updated>2019-07-19T08:14:04.574Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h3><p>下载地址 <a href="https://pecl.php.net/package/seaslog" target="_blank" rel="noopener">https://pecl.php.net/package/seaslog</a> SeasLog-1.9.0.tgz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf SeasLog-1.9.0.tgz</span><br><span class="line"><span class="built_in">cd</span> SeasLog-1.9.0                      <span class="comment"># 进入 SeasLog 目录</span></span><br><span class="line">/usr/<span class="built_in">local</span>/php/bin/phpize             <span class="comment"># php安装后的路径</span></span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>修改php.ini文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line"><span class="comment">#增加如下内容:</span></span><br><span class="line">extension_dir = <span class="string">"/usr/local/php/lib/php/extensions/no-debug-zts-20090626"</span>（默认可以不加）</span><br><span class="line">extension=seasLog.so（必加）</span><br></pre></td></tr></table></figure><h3 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h3><p>下载地址 <a href="https://pecl.php.net/package/SeasLog/1.6.9/windows" target="_blank" rel="noopener">https://pecl.php.net/package/SeasLog/1.6.9/windows</a><br>下载之后 把里面的php_seaslog.dll拷贝到PHP的安装目录下的ext里<br>然后打开php.ini进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=php_seaslog.dll</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux-下安装&quot;&gt;&lt;a href=&quot;#Linux-下安装&quot; class=&quot;headerlink&quot; title=&quot;Linux 下安装&quot;&gt;&lt;/a&gt;Linux 下安装&lt;/h3&gt;&lt;p&gt;下载地址 &lt;a href=&quot;https://pecl.php.net/package
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="seasLog" scheme="https://www.yszldf.cn/tags/seasLog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.yszldf.cn/2019/06/14/hello-world/"/>
    <id>https://www.yszldf.cn/2019/06/14/hello-world/</id>
    <published>2019-06-14T07:41:20.436Z</published>
    <updated>2019-06-14T07:41:20.436Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HBJ-ERP-项目展示</title>
    <link href="https://www.yszldf.cn/2019/02/25/HBJ-ERP-%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    <id>https://www.yszldf.cn/2019/02/25/HBJ-ERP-项目展示/</id>
    <published>2019-02-24T17:39:00.000Z</published>
    <updated>2019-06-14T07:41:20.390Z</updated>
    
    <content type="html"><![CDATA[<p>部分代码展示：<br><img src="/images/hbj-erp-c.png" alt="hbj-erp-c"><br><img src="/images/hbj-erp-s.jpg" alt="hbj-erp-s"><br><img src="/images/hbj-erp-l.jpg" alt="hbj-erp-l"></p><p>接口展示：<br><img src="/images/hbj-erp-postman.jpg" alt="hbj-erp-postman"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;部分代码展示：&lt;br&gt;&lt;img src=&quot;/images/hbj-erp-c.png&quot; alt=&quot;hbj-erp-c&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/hbj-erp-s.jpg&quot; alt=&quot;hbj-erp-s&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/hb
      
    
    </summary>
    
      <category term="项目展示" scheme="https://www.yszldf.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="项目展示" scheme="https://www.yszldf.cn/tags/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>得力之家-项目展示</title>
    <link href="https://www.yszldf.cn/2019/02/25/%E5%BE%97%E5%8A%9B%E4%B9%8B%E5%AE%B6-%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    <id>https://www.yszldf.cn/2019/02/25/得力之家-项目展示/</id>
    <published>2019-02-24T16:20:34.000Z</published>
    <updated>2019-06-14T07:41:21.046Z</updated>
    
    <content type="html"><![CDATA[<p>项目展示：<br><a href="/files/得力之家APP.pptx">得力之家APP.pptx</a></p><p>展示地址：<br><a href="http://140.143.243.43:6680/admin" target="_blank">GO</a><br>账号：sysadmin<br>密码：ysz1002</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目展示：&lt;br&gt;&lt;a href=&quot;/files/得力之家APP.pptx&quot;&gt;得力之家APP.pptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;展示地址：&lt;br&gt;&lt;a href=&quot;http://140.143.243.43:6680/admin&quot; target=&quot;_blank&quot;&gt;GO&lt;/a&gt;
      
    
    </summary>
    
      <category term="项目展示" scheme="https://www.yszldf.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="项目展示" scheme="https://www.yszldf.cn/tags/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>中小型企业服务管理平台-项目展示</title>
    <link href="https://www.yszldf.cn/2019/02/25/%E4%B8%AD%E5%B0%8F%E5%9E%8B%E4%BC%81%E4%B8%9A%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0-%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    <id>https://www.yszldf.cn/2019/02/25/中小型企业服务管理平台-项目展示/</id>
    <published>2019-02-24T16:14:15.000Z</published>
    <updated>2019-06-14T07:41:20.943Z</updated>
    
    <content type="html"><![CDATA[<p>项目展示：<br><a href="/files/中小型企业服务管理平台.docx">中小型企业服务管理平台docx</a></p><p>后台管理页面：<br><img src="/images/dcoa.jpg" alt="dcoa"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目展示：&lt;br&gt;&lt;a href=&quot;/files/中小型企业服务管理平台.docx&quot;&gt;中小型企业服务管理平台docx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后台管理页面：&lt;br&gt;&lt;img src=&quot;/images/dcoa.jpg&quot; alt=&quot;dcoa&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="项目展示" scheme="https://www.yszldf.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="项目展示" scheme="https://www.yszldf.cn/tags/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>智能oa移动办公管理系统-项目展示</title>
    <link href="https://www.yszldf.cn/2019/02/24/%E6%99%BA%E8%83%BDoa%E7%A7%BB%E5%8A%A8%E5%8A%9E%E5%85%AC%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    <id>https://www.yszldf.cn/2019/02/24/智能oa移动办公管理系统-项目展示/</id>
    <published>2019-02-24T15:57:58.000Z</published>
    <updated>2019-06-14T07:41:21.151Z</updated>
    
    <content type="html"><![CDATA[<p>项目展示：<br><a href="/files/智能OA办公管理系统.pptx">智能OA办公管理系统PPT</a></p><p><strong>注意</strong><br>展示地址：<br><a href="http://qjoa.nbdeli.net" target="_blank" rel="noopener">GO</a><br>账号：见展示地址登录页<br>密码：默认123456</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目展示：&lt;br&gt;&lt;a href=&quot;/files/智能OA办公管理系统.pptx&quot;&gt;智能OA办公管理系统PPT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;br&gt;展示地址：&lt;br&gt;&lt;a href=&quot;http://qjoa.nbdeli.net&quot; targe
      
    
    </summary>
    
      <category term="项目展示" scheme="https://www.yszldf.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="项目展示" scheme="https://www.yszldf.cn/tags/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>普惠金融服务平台-项目展示</title>
    <link href="https://www.yszldf.cn/2019/02/24/%E6%99%AE%E6%83%A0%E9%87%91%E8%9E%8D%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    <id>https://www.yszldf.cn/2019/02/24/普惠金融服务平台-项目展示/</id>
    <published>2019-02-24T15:41:22.000Z</published>
    <updated>2019-06-14T07:41:21.050Z</updated>
    
    <content type="html"><![CDATA[<p>项目展示：<br><a href="/files/普惠服务平台.pptx">普惠服务平台项目展示PPT</a></p><p>后台管理登录页：<br><img src="/images/puhui_admin.png" alt="puhui_admin"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目展示：&lt;br&gt;&lt;a href=&quot;/files/普惠服务平台.pptx&quot;&gt;普惠服务平台项目展示PPT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后台管理登录页：&lt;br&gt;&lt;img src=&quot;/images/puhui_admin.png&quot; alt=&quot;puhui_admin&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="项目展示" scheme="https://www.yszldf.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="项目展示" scheme="https://www.yszldf.cn/tags/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>linux下docker下Nginx+Php+Mysql+Redis+Elasticsearch开发环境搭建</title>
    <link href="https://www.yszldf.cn/2019/02/24/linux%E4%B8%8Bdocker%E4%B8%8BNginx-Php-Mysql-Redis-Elasticsearch%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.yszldf.cn/2019/02/24/linux下docker下Nginx-Php-Mysql-Redis-Elasticsearch开发环境搭建/</id>
    <published>2019-02-24T12:55:22.000Z</published>
    <updated>2019-07-20T09:11:37.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-docker-安装"><a href="#1-docker-安装" class="headerlink" title="1 docker 安装"></a>1 docker 安装</h3><h4 id="ubuntu-14-x-15-x"><a href="#ubuntu-14-x-15-x" class="headerlink" title="ubuntu 14.x 15.x"></a>ubuntu 14.x 15.x</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">curl -sSL https://get.docker.io/ | sudo sh</span><br></pre></td></tr></table></figure><h4 id="centos-6-x-7-x"><a href="#centos-6-x-7-x" class="headerlink" title="centos 6.x 7.x"></a>centos 6.x 7.x</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">curl -sSL https://get.docker.io/ | sudo sh</span><br></pre></td></tr></table></figure><h4 id="如果安装出现错误"><a href="#如果安装出现错误" class="headerlink" title="如果安装出现错误"></a>如果安装出现错误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATA[0000] Error loading docker apparmor profile: fork/<span class="built_in">exec</span> /sbin/apparmor_parser: no such file or directory () ;</span><br></pre></td></tr></table></figure><p>安装apparmor软件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apparmor</span><br></pre></td></tr></table></figure><p>下面需要创建用户和所属用户组，根据1.4 设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: The docker group is equivalent to the root user; For details on how this impacts security <span class="keyword">in</span> your system, see Docker Daemon Attack Surface <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><h4 id="设置用户和组"><a href="#设置用户和组" class="headerlink" title="设置用户和组"></a>设置用户和组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -g docker docker</span><br><span class="line">sudo usermod -aG docker docker</span><br></pre></td></tr></table></figure><h3 id="2-docker-启动"><a href="#2-docker-启动" class="headerlink" title="2 docker 启动"></a>2 docker 启动</h3><h4 id="旧启动方式"><a href="#旧启动方式" class="headerlink" title="旧启动方式"></a>旧启动方式</h4><p>centos 6.x ,ubuntu 14.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><h4 id="新的启动方式"><a href="#新的启动方式" class="headerlink" title="新的启动方式"></a>新的启动方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#centos 7.x ,ubuntu 15.x</span></span><br><span class="line">sudo systemctl stop docker</span><br><span class="line">或</span><br><span class="line"><span class="comment">#centos 6.x ,ubuntu 14.x</span></span><br><span class="line">sudo service docker stop</span><br></pre></td></tr></table></figure><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#centos 7.x ,ubuntu 15.x</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">或</span><br><span class="line"><span class="comment">#centos 6.x ,ubuntu 14.x</span></span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><h4 id="docker状态"><a href="#docker状态" class="headerlink" title="docker状态"></a>docker状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#centos 7.x ,ubuntu 15.x</span></span><br><span class="line">sudo systemctl status docker</span><br><span class="line">或</span><br><span class="line"><span class="comment">#centos 6.x ,ubuntu 14.x</span></span><br><span class="line">sudo service docker status</span><br></pre></td></tr></table></figure><h4 id="docker-版本"><a href="#docker-版本" class="headerlink" title="docker 版本"></a>docker 版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker -v</span><br></pre></td></tr></table></figure><h3 id="3-相关配置"><a href="#3-相关配置" class="headerlink" title="3 相关配置"></a>3 相关配置</h3><p>配置文件增加参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/default/docker</span><br></pre></td></tr></table></figure><p>在配置文件中添加或修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER=<span class="string">"/usr/bin/docker"</span></span><br></pre></td></tr></table></figure><p>增加完成后，重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="4-镜像拉取"><a href="#4-镜像拉取" class="headerlink" title="4 镜像拉取"></a>4 镜像拉取</h3><p>注意：<br>如果拉取时间过长，docker hub 会自动切断链接，它会报超时错误！<br>这个时候再重新执行拉取命令即可，他会接着上次拉取断的位置重新拉取的</p><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#来自 https://hub.docker.com/_/mysql/</span></span><br><span class="line">sudo docker pull mysql:5.6</span><br></pre></td></tr></table></figure><p>拉取时间根据每人的网速有关<br>项目都是根据 mysql 5.6 版本的，所以这里选择5.6版本<br>mysql:5.6 表示 镜像名称:版本号</p><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#来自 https://hub.docker.com/_/redis/</span></span><br><span class="line">sudo docker pull redis</span><br></pre></td></tr></table></figure><p>redis 后面没有版本号时，默认拉取最新的一版 即 redis:latest</p><h4 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#来自 https://hub.docker.com/_/elasticsearch/</span></span><br><span class="line">sudo docker pull elasticsearch</span><br></pre></td></tr></table></figure><p>elasticsearch 后面没有版本号时，默认拉取最新的一版 即 elasticsearch:latest</p><h4 id="nginx-和php"><a href="#nginx-和php" class="headerlink" title="nginx 和php"></a>nginx 和php</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#来自 https://hub.docker.com/r/foxiswho/nginx-php</span></span><br><span class="line">sudo docker pull foxiswho/nginx-php</span><br></pre></td></tr></table></figure><p>lanmps 后面没有版本号时，默认拉取最新的一版 即 lanmps:latest<br>nginx 版本 1.8.0<br>php 版本 5.6.x</p><h4 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h4><p>有同学可能会使用这个缓存，需要的拿去<br>我们目前项目没有使用它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#来自 https://hub.docker.com/_/memcached/</span></span><br><span class="line">sudo docker pull memcached</span><br></pre></td></tr></table></figure><h4 id="镜像拉取相关问题"><a href="#镜像拉取相关问题" class="headerlink" title="镜像拉取相关问题"></a>镜像拉取相关问题</h4><p>拉取不成功时：重新执行拉取命令</p><p>哪种为拉取不成功：repository与tag为none</p><h3 id="5-镜像查看"><a href="#5-镜像查看" class="headerlink" title="5 镜像查看"></a>5 镜像查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><h3 id="6-生成容器"><a href="#6-生成容器" class="headerlink" title="6 生成容器"></a>6 生成容器</h3><h4 id="mysql-1"><a href="#mysql-1" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.6</span><br></pre></td></tr></table></figure><p>–name 容器名称</p><blockquote><p>mysql 为自定义名称</p></blockquote><p>-p:暴露端口，映射端口(可以映射多个端口) 外部端口容器内部端口</p><blockquote><p>-p 3306:3306 映射端口</p></blockquote><p>-e:设置任意环境变量(容器内)</p><blockquote><p>MYSQL_ROOT_PASSWORD=root 这里指 设置数据库密码为root</p></blockquote><p>mysql:5.6 镜像名称:版本</p><h4 id="redis-1"><a href="#redis-1" class="headerlink" title="redis"></a>redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name redis -p 6379:6379 -d redis:latest</span><br></pre></td></tr></table></figure><p>redis 为自定义名称<br>-p 6379:6379 映射端口， 即 外部端口:容器内端口<br>redis:latest 镜像名称:版本</p><h4 id="ElasticSearch-1"><a href="#ElasticSearch-1" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name es -p 9200:9200 -p 9300:9300 -d elasticsearch:latest</span><br></pre></td></tr></table></figure><p>es 为自定义名称<br>-p 9200:9200 映射端口(可以映射多个端口)， 即 外部端口:容器内端口<br>elasticsearch:latest 镜像名称:版本</p><h4 id="Nginx-PHP"><a href="#Nginx-PHP" class="headerlink" title="Nginx+PHP"></a>Nginx+PHP</h4><h5 id="方式一-容器内链接"><a href="#方式一-容器内链接" class="headerlink" title="方式一 容器内链接"></a>方式一 容器内链接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name lanmps --link mysql:db --link es:es --link redis:redis -p 80:80 -v /home/lanmps/www:/www/wwwroot -d foxiswho/nginx-php</span><br></pre></td></tr></table></figure><p>–name 容器名称</p><blockquote><p>–name lanmps 名为lanmps的容器</p></blockquote><p>-p:暴露端口，映射端口(可以映射多个端口) 外部端口：容器内部端口</p><blockquote><p>-p 80:80 外部80端口:容器内部80端口</p></blockquote><p>-d:后台模式运行，如果没有则以前台运行（当前进程关闭后，当前容器自动关闭）<br>foxiswho/nginx-php 镜像名称:版本<br>–link:容器内部通信 容器名称：内部别名（内部使用）</p><blockquote><p>–link mysql:db 使用时，直接使用db 就可以访问到数据库mysql容器<br>php 访问本地mysql 使用的是localhost，容器内部即可使用 db</p></blockquote><p>-v:卷，外部目录虚拟到容器内目录 外部目录：容器内目录</p><blockquote><p>-v /home/lanmps/www:/www/wwwroot<br>/home/lanmps/www 外部目录，我的项目目录<br>/www/wwwroot 容器内部目录，这个是不能改变的</p></blockquote><p><strong>注意</strong><br>本地 目录设置权限和用户组<br>chown -R www:www /home/lanmps/www<br>chmod -R 777 /home/lanmps/www<br>这个时候访问本机 127.0.0.1:80 就可以看到 你的项目站点了</p><h5 id="方式二-使用IP端口连接"><a href="#方式二-使用IP端口连接" class="headerlink" title="方式二 使用IP端口连接"></a>方式二 使用IP端口连接</h5><p><strong>注意</strong><br>使用IP端口连接，必须是固定IP才可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name lanmps -p 80:80 -v /home/lanmps/www:/www/wwwroot -d foxiswho/nginx-php</span><br></pre></td></tr></table></figure><p>例如 本机ip 为 192.168.1.122<br>那么在链接 数据库3306 的时候，ip设置为192.168.1.122，端口号 3306</p><p><strong>注意</strong><br>本地 目录设置权限和用户组<br>chown -R www:www /home/lanmps/www<br>chmod -R 777 /home/lanmps/www<br>这个时候访问本机 127.0.0.1:80 就可以看到 你的项目站点了</p><h3 id="7-容器命令"><a href="#7-容器命令" class="headerlink" title="7 容器命令"></a>7 容器命令</h3><blockquote><p>普通情况下容器创建时，该容器就会是启动状态，如果关机了，那么就要启动该容器</p></blockquote><h4 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h4><p>先启动没有任何链接的容器，最后启动 有关联的容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker start 容器名称</span><br><span class="line"></span><br><span class="line">sudo docker start redis</span><br><span class="line">sudo docker start mysql</span><br><span class="line">sudo docker start es</span><br><span class="line">sudo docker start lanmps</span><br></pre></td></tr></table></figure></p><h4 id="容器关闭"><a href="#容器关闭" class="headerlink" title="容器关闭"></a>容器关闭</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop 容器名称</span><br><span class="line"></span><br><span class="line">sudo docker stop es</span><br></pre></td></tr></table></figure><h4 id="容器重启"><a href="#容器重启" class="headerlink" title="容器重启"></a>容器重启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker restart 容器名称</span><br><span class="line"></span><br><span class="line">sudo docker restart es</span><br></pre></td></tr></table></figure><h4 id="容器删除"><a href="#容器删除" class="headerlink" title="容器删除"></a>容器删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm 容器名称</span><br></pre></td></tr></table></figure><p>删除所有容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -q -a)</span><br></pre></td></tr></table></figure></p><h4 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it lanmps /bin/bash</span><br></pre></td></tr></table></figure><h4 id="查看-正在运行的容器"><a href="#查看-正在运行的容器" class="headerlink" title="查看 正在运行的容器"></a>查看 正在运行的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure><h4 id="查看-所有容器"><a href="#查看-所有容器" class="headerlink" title="查看 所有容器"></a>查看 所有容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure><h3 id="8-docker-镜像命令"><a href="#8-docker-镜像命令" class="headerlink" title="8 docker 镜像命令"></a>8 docker 镜像命令</h3><h4 id="所有镜像"><a href="#所有镜像" class="headerlink" title="所有镜像"></a>所有镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rmi lanmps</span><br></pre></td></tr></table></figure><p>删除所有镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure></p><h3 id="9-docker-容器导入与导出"><a href="#9-docker-容器导入与导出" class="headerlink" title="9 docker 容器导入与导出"></a>9 docker 容器导入与导出</h3><blockquote><p>导出后再导入 的镜像会丢失所有的历史</p></blockquote><h4 id="导出-export"><a href="#导出-export" class="headerlink" title="导出 export"></a>导出 export</h4><blockquote><p>Export命令用于持久化容器（不是镜像）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.先查看 所有容器</span></span><br><span class="line">sudo docker ps -a</span><br><span class="line"><span class="comment">#2.找到要导出容器 的 CONTAINER ID，然后执行命令</span></span><br><span class="line">sudo docker <span class="built_in">export</span> 容器CONTAINER ID &gt; 导出地址文件名</span><br><span class="line">即</span><br><span class="line">sudo docker <span class="built_in">export</span> 234wer2323dfdfdsfq &gt; /home/export.tar</span><br></pre></td></tr></table></figure><h4 id="导入-import"><a href="#导入-import" class="headerlink" title="导入 import"></a>导入 import</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/export.tar | sudo docker import - lanmps:latest</span><br></pre></td></tr></table></figure><h3 id="10-docker-镜像保存与加载"><a href="#10-docker-镜像保存与加载" class="headerlink" title="10 docker 镜像保存与加载"></a>10 docker 镜像保存与加载</h3><blockquote><p>保存后再加载（saveed-loaded）的镜像没有丢失历史和层(layer)</p></blockquote><h4 id="保存-save"><a href="#保存-save" class="headerlink" title="保存 save"></a>保存 save</h4><blockquote><p>Save命令用于持久化镜像（不是容器）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.先查看 所有镜像</span></span><br><span class="line">sudo docker images</span><br><span class="line"><span class="comment">#2.找到要保存的镜像名称</span></span><br><span class="line">sudo docker save 镜像名称 &gt; 保存地址文件名</span><br><span class="line">即</span><br><span class="line">sudo docker save lanmps &gt; /home/save-lanmps.tar</span><br></pre></td></tr></table></figure><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; /home/save-lanmps.tar</span><br></pre></td></tr></table></figure><h3 id="访问项目站点"><a href="#访问项目站点" class="headerlink" title="访问项目站点"></a>访问项目站点</h3><p>因为lanmps 设置的端口为80，那么就可以直接 在浏览器上 输入 127.0.0.1，<br>就可以看到 你的项目站点了</p><h3 id="nginx-docker内配置文件位置"><a href="#nginx-docker内配置文件位置" class="headerlink" title="nginx docker内配置文件位置"></a>nginx docker内配置文件位置</h3><p>配置文件位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><h3 id="php-docker内配置文件位置"><a href="#php-docker内配置文件位置" class="headerlink" title="php docker内配置文件位置"></a>php docker内配置文件位置</h3><p>配置文件及目录位置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/etc/php-fpm.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/etc/php-fpm.d/www.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/etc/php-fpm.d 目录</span><br></pre></td></tr></table></figure><h3 id="php-ini-默认加载目录位置"><a href="#php-ini-默认加载目录位置" class="headerlink" title="php.ini 默认加载目录位置"></a>php.ini 默认加载目录位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/etc/php/conf.d/ 目录</span><br></pre></td></tr></table></figure><h3 id="扩展目录位置"><a href="#扩展目录位置" class="headerlink" title="扩展目录位置"></a>扩展目录位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lib/php/extensions/</span><br></pre></td></tr></table></figure><p>More info: <a href="https://blog.csdn.net/fenglailea/article/details/50451555" target="_blank" rel="noopener">GO</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-docker-安装&quot;&gt;&lt;a href=&quot;#1-docker-安装&quot; class=&quot;headerlink&quot; title=&quot;1 docker 安装&quot;&gt;&lt;/a&gt;1 docker 安装&lt;/h3&gt;&lt;h4 id=&quot;ubuntu-14-x-15-x&quot;&gt;&lt;a href=&quot;#u
      
    
    </summary>
    
      <category term="服务器" scheme="https://www.yszldf.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="https://www.yszldf.cn/tags/linux/"/>
    
      <category term="docker" scheme="https://www.yszldf.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Php指定时间戳/日期加一天，一年，一周，一月</title>
    <link href="https://www.yszldf.cn/2019/02/24/Php%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E6%88%B3-%E6%97%A5%E6%9C%9F%E5%8A%A0%E4%B8%80%E5%A4%A9%EF%BC%8C%E4%B8%80%E5%B9%B4%EF%BC%8C%E4%B8%80%E5%91%A8%EF%BC%8C%E4%B8%80%E6%9C%88/"/>
    <id>https://www.yszldf.cn/2019/02/24/Php指定时间戳-日期加一天，一年，一周，一月/</id>
    <published>2019-02-24T12:19:58.000Z</published>
    <updated>2019-06-14T07:41:20.741Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'now'</span>));//当前时间戳 2017-01-09 21:04:11</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'+1second'</span>));//当前时间戳+1秒 2017-01-09 21:04:12</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'+1minute'</span>));//当前时间戳+1分 2017-01-09 21:05:11</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'+1hour'</span>));//当前时间戳+1小时 2017-01-09 22:04:11</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'+1day'</span>));//当前时间戳+1天 2017-01-10 21:04:11</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'+1week'</span>));//当前时间戳+1周 2017-01-16 21:04:11</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'+1month'</span>));//当前时间戳+1月 2017-02-09 21:04:11</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'+1year'</span>));//当前时间戳+1年 2018-01-09 21:04:11</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">'+12year 12month 12day 12hour 12minute 12second'</span>));//当前时间戳+12年，12月，12天，12小时，12分，12秒 2030-01-22 09:16:23</span><br><span class="line"><span class="variable">$t</span>=1483967416;//指定时间戳</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$dt</span>=date(<span class="string">'Y-m-d H:i:s'</span>,<span class="variable">$t</span>);//2017-01-09 21:10:16</span><br><span class="line">/*方法一*/</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,<span class="variable">$t</span>+1*24*60*60);//指定时间戳+1天 2017-01-10 21:10:16</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,<span class="variable">$t</span>+365*24*60*60);//指定时间戳+1年 2018-01-09 21:10:16</span><br><span class="line">/*方法二*/</span><br><span class="line">//<span class="variable">$dt</span>是指定时间戳格式化后的日期</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">"<span class="variable">$dt</span>+1day"</span>));//指定时间戳+1天 2017-01-10 21:10:16</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">"<span class="variable">$dt</span>+1year"</span>));//指定时间戳+1年 2018-01-09 21:10:16</span><br><span class="line">/*方法三*/</span><br><span class="line">//<span class="variable">$t</span>是指定时间戳</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">"+1day"</span>,<span class="variable">$t</span>));//指定时间戳+1天 2017-01-10 21:10:16</span><br><span class="line"><span class="built_in">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,strtotime(<span class="string">"+1year"</span>,<span class="variable">$t</span>));//指定时间戳+1年 2018-01-09 21:10:16</span><br><span class="line">//指定时间戳加1月、1周、1小时、1分、1秒原理同上；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="后端" scheme="https://www.yszldf.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="php" scheme="https://www.yszldf.cn/tags/php/"/>
    
  </entry>
  
</feed>
